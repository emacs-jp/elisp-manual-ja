@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-1999, 2001-2015 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node System Interface
@chapter オペレーティングシステムとのインターフェイス

本章は、Emacsの起動と終了、オペレーティングシステムの環境に収められた値の
参照方法、端末入出力とフロー制御について述べる。

関連情報については@xref{Building Emacs}。また、端末やスクリーンに関係する
オペレーティングシステムの状態情報については、@xref{Display}。

@menu
* Starting Up::         Customizing Emacs startup processing.
* Getting Out::         How exiting works (permanent or temporary).
* System Environment::  Distinguish the name and kind of system.
* User Identification:: Finding the name and user id of the user.
* Time of Day::         Getting the current time.
* Time Conversion::     Converting a time from numeric form to
                          calendrical data and vice versa.
* Time Parsing::        Converting a time from numeric form to text
                          and vice versa.
* Processor Run Time::  Getting the run time used by Emacs.
* Time Calculations::   Adding, subtracting, comparing times, etc.
* Timers::              Setting a timer to call a function at a certain time.
* Idle Timers::         Setting a timer to call a function when Emacs has
                          been idle for a certain length of time.
* Terminal Input::      Accessing and recording terminal input.
* Terminal Output::     Controlling and recording terminal output.
* Sound Output::        Playing sounds on the computer's speaker.
* X11 Keysyms::         Operating on key symbols for X Windows.
* Batch Mode::          Running Emacs without terminal interaction.
* Session Management::  Saving and restoring state with X Session Management.
* Desktop Notifications:: Desktop notifications.
* File Notifications::  File notifications.
* Dynamic Libraries::   On-demand loading of support libraries.
@end menu

@node Starting Up
@section Emacsの始動

本節では、Emacsが起動時になにを行うか、および、それらをカスタマイズする方
法について述べる。

@menu
* Startup Summary::         Sequence of actions Emacs performs at startup.
* Init File::               Details on reading the init file.
* Terminal-Specific::       How the terminal-specific Lisp file is read.
* Command-Line Arguments::  How command-line arguments are processed,
                              and how you can customize them.
@end menu

@node Startup Summary
@subsection 概要：始動時の動作手順
@cindex 初期化
@cindex Emacsの始動
@cindex @file{startup.el}

Emacsは、始動したときに以下の順序で処理を行う。
(see @code{normal-top-level} in @file{startup.el}):

@enumerate
@item
@code{load-path}にある各ディレクトリファイルにおいて、
@file{subdirs.el}という名前のファイルを実行することで、
サブディレクトリを追加する。
Normally, this file
adds the directory's subdirectories to the list, and those are scanned
in their turn.  The files @file{subdirs.el} are normally generated
automatically when Emacs is installed.

@item
It loads any @file{leim-list.el} that it finds in the @code{load-path}
directories.  This file is intended for registering input methods.
The search is only for any personal @file{leim-list.el} files that you
may have created; it skips the directories containing the standard Emacs
libraries (these should contain only a single @file{leim-list.el} file,
which is compiled into the Emacs executable).

@vindex before-init-time
@item
It sets the variable @code{before-init-time} to the value of
@code{current-time} (@pxref{Time of Day}).  It also sets
@code{after-init-time} to @code{nil}, which signals to Lisp programs
that Emacs is being initialized.

@c set-locale-environment
@item
@env{LANG}などの環境変数で要求されていれば、言語環境と端末のコーディング
システムを設定する。

@item
It does some basic parsing of the command-line arguments.

@vindex initial-window-system@r{, and startup}
@vindex window-system-initialization-alist
@item
If not running in batch mode, it initializes the window system that
the variable @code{initial-window-system} specifies (@pxref{Window
Systems, initial-window-system}).  The initialization function for
each supported window system is specified by
@code{window-system-initialization-alist}.  If the value
of @code{initial-window-system} is @var{windowsystem}, then the
appropriate initialization function is defined in the file
@file{term/@var{windowsystem}-win.el}.  This file should have been
compiled into the Emacs executable when it was built.

@item
It runs the normal hook @code{before-init-hook}.

@item
If appropriate, it creates a graphical frame.  This is not done if the
options @samp{--batch} or @samp{--daemon} were specified.

@item
It initializes the initial frame's faces, and sets up the menu bar
and tool bar if needed.  If graphical frames are supported, it sets up
the tool bar even if the current frame is not a graphical one, since a
graphical frame may be created later on.

@item
It use @code{custom-reevaluate-setting} to re-initialize the members
of the list @code{custom-delayed-init-variables}.  These are any
pre-loaded user options whose default value depends on the run-time,
rather than build-time, context.
@xref{Building Emacs, custom-initialize-delay}.

@c @item
@c It registers the colors available for tty frames.

@item
@file{site-start}が存在する場合はロードする。
オプション@samp{-Q}または@samp{--no-site-file}が指定されていれば読み込まれない。
@cindex @file{site-start.el}

@item
読者の初期設定ファイルを読み込む（@pxref{Init File}）。ただし、
コマンド行で@samp{-q}、@samp{-Q}または@samp{--batch}が指定されていれば読み込まれない。
オプション@samp{-u}で、ホームディレクトリを持つ他のユーザー名を指定できる。

@item 
ライブラリ@file{default}が存在すればそれをロードする。ただし、
@code{inhibit-default-init}が@code{nil}以外でなかったり、
オプション@samp{-q}、@samp{-Q}、@samp{--batch}が指定されていなければ、
読み込まれない
@cindex @file{default.el}

@item
It loads your abbrevs from the file specified by
@code{abbrev-file-name}, if that file exists and can be read
(@pxref{Abbrev Files, abbrev-file-name}).  This is not done if the
option @samp{--batch} was specified.

@item
If @code{package-enable-at-startup} is non-@code{nil}, it calls the
function @code{package-initialize} to activate any optional Emacs Lisp
package that has been installed.  @xref{Packaging Basics}.

@vindex after-init-time
@item
It sets the variable @code{after-init-time} to the value of
@code{current-time}.  This variable was set to @code{nil} earlier;
setting it to the current time signals that the initialization phase
is over, and, together with @code{before-init-time}, provides the
measurement of how long it took.

@item
ノーマルフック@code{after-init-hook}を実行する。

@item
バッファ@file{*scratch*}がカレントバッファであり基本（fundamental）モード
であるならば、@code{initial-major-mode}に従ってメジャーモードを設定する。

@item
If started on a text terminal, it loads the terminal-specific
Lisp library (@pxref{Terminal-Specific}), and runs the hook
@code{tty-setup-hook}.  This is not done
in @code{--batch} mode, nor if @code{term-file-prefix} is @code{nil}.

@c Now command-line calls command-line-1.

@item
@code{inhibit-startup-echo-area-message}で抑制していなければ、
初期メッセージをエコー領域に表示する。

@item
以前に処理されていない任意のコマンド行の引数を処理する。

@c This next one is back in command-line, but the remaining bits of
@c command-line-1 are not done if noninteractive.
@item
It now exits if the option @code{--batch} was specified.

@item
If @code{initial-buffer-choice} is a string, it visits the file (or
directory) with that name.  If it is a function, it calls the function
with no arguments and selects the buffer that it returns.
@ignore
@c I do not think this should be mentioned.  AFAICS it is just a dodge
@c around inhibit-startup-screen not being settable on a site-wide basis.
If it is @code{t}, it selects the @file{*scratch*} buffer.
@end ignore
If the @file{*scratch*} buffer exists and is empty, it inserts
@code{initial-scratch-message} into that buffer.

@c To make things nice and confusing, the next three items can be
@c called from two places.  If displaying a startup screen, they are
@c called in command-line-1 before the startup screen is shown.
@c inhibit-startup-hooks is then set and window-setup-hook set to nil.
@c If not displaying a startup screen, they are are called in
@c normal-top-level.
@c FIXME?  So it seems they can be called before or after the
@c daemon/session restore step?

@item
@code{emacs-startup-hook}を実行する。

@item
初期化ファイルの指定に従って選択されているフレームのパラメータを修正する
@code{frame-notice-user-settings}を呼び出す。

@item
@code{window-setup-hook}を実行する。
The only difference between this
hook and @code{emacs-startup-hook} is that this one runs after the
previously mentioned modifications to the frame parameters.

@item
@cindex startup screen
It displays the @dfn{startup screen}, which is a special buffer that
contains information about copyleft and basic Emacs usage.  This is
not done if @code{inhibit-startup-screen} or @code{initial-buffer-choice}
are non-@code{nil}, or if the @samp{--no-splash} or @samp{-Q} command-line
options were specified.

@c End of command-line-1.

@c Back to command-line from command-line-1.

@c This is the point at which we actually exit in batch mode, but the
@c last few bits of command-line-1 are not done in batch mode.

@item
If the option @code{--daemon} was specified, it calls
@code{server-start} and detaches from the controlling terminal.
@xref{Emacs Server,,, emacs, The GNU Emacs Manual}.

@item
If started by the X session manager, it calls
@code{emacs-session-restore} passing it as argument the ID of the
previous session.  @xref{Session Management}.

@c End of command-line.

@c Back to normal-top-level from command-line.

@end enumerate

@noindent
The following options affect some aspects of the startup sequence.

@defopt inhibit-startup-screen
この変数は、@code{nil}以外であると（無保証などの）初期の始動メッセージを
禁止する。
In
that case, Emacs typically displays the @file{*scratch*} buffer; but
see @code{initial-buffer-choice}, below.

始動メッセージの内容に十分慣れたら、読者個人の初期化ファイルで設定できる
ようにこの変数がある。新規ユーザーが受け取るはずである情報を隠してしまう
ため、新規ユーザーの初期化ファイルや複数のユーザーに影響するような方法で
この変数に設定しないこと。

@vindex inhibit-startup-message
@vindex inhibit-splash-screen
@code{inhibit-startup-message} and @code{inhibit-splash-screen} are
aliases for this variable.
@end defopt

@defopt initial-buffer-choice
If non-@code{nil}, this variable is a string that specifies a file or
directory for Emacs to display after starting up, instead of the
startup screen.
@ignore
If its value is @code{t}, Emacs displays the @file{*scratch*} buffer.
@end ignore
@end defopt

@defopt inhibit-startup-echo-area-message
この変数は、エコー領域に表示する始動メッセージを制御する。
読者の初期設定ファイルに
以下のフォームを追加することでエコー領域の始動メッセージを
抑制できる。

@example
(setq inhibit-startup-echo-area-message
      "@var{your-login-name}")
@end example

Emacsは、読者の初期設定ファイルで上に示した式を明示的に検査する。
読者のログイン名はLisp文字列定数として式に現れる必要がある。
Customizeインタフェースでも値を設定できる。
@code{inhibit-startup-echo-area-message}に同じ値を設定する別の方法では、
始動メッセージを禁止できない。
このように、望むならば自身のためにメッセージを簡単に禁止できるが、
読者の初期設定ファイルをむやみにコピーしても、他人に
対してはメッセージを禁止できない。
@end defopt

@defopt initial-scratch-message
This variable, if non-@code{nil}, should be a string, which is
inserted into the @file{*scratch*} buffer when Emacs starts up.  If it
is @code{nil}, the @file{*scratch*} buffer is empty.
@end defopt

@noindent
The following command-line options affect some aspects of the startup
sequence.  @xref{Initial Options,,, emacs, The GNU Emacs Manual}.

@table @code
@item --no-splash
Do not display a splash screen.

@item --batch
Run without an interactive terminal.  @xref{Batch Mode}.

@item --daemon
Do not initialize any display; just start a server in the background.

@item --no-init-file
@itemx -Q
Do not load either the init file, or the @file{default} library.

@item --no-site-file
Do not load the @file{site-start} library.

@item --quick
@itemx -Q
Equivalent to @samp{-q --no-site-file --no-splash}.
@c and --no-site-lisp, but let's not mention that here.
@end table


@node Init File
@subsection 初期化ファイル
@cindex 初期化ファイル
@cindex @file{.emacs}
@cindex @file{init.el}

読者がEmacsを始動すると、Emacsは読者のホームディレクトリから@dfn{初期化ファイル}
(init file)を普通はロードしようとします。
This is either a file named @file{.emacs} or @file{.emacs.el}
in your home directory, or a file named @file{init.el} in a
subdirectory named @file{.emacs.d} in your home directory.
@ignore
Whichever place you use, you can also compile the file (@pxref{Byte
Compilation}); then the actual file loaded will be @file{.emacs.elc}
or @file{init.elc}.
@end ignore

コマンド行オプション@samp{-q}、@samp{-Q}および@samp{-u}は、
初期化ファイルの場所を制御する。
@samp{-q}（およびより強い@samp{-Q}）は初期化ファイルを
ロードしないように指示し、@samp{-u
@var{user}}は読者の初期化ファイルのかわりに
ユーザー@var{user}の初期化ファイルをロードするように指示する。
@xref{Entering Emacs,,, emacs, The GNU Emacs Manual}。
If neither
option is specified, Emacs uses the @env{LOGNAME} environment
variable, or the @env{USER} (most systems) or @env{USERNAME} (MS
systems) variable, to find your home directory and thus your init
file; this way, even if you have su'd, Emacs still loads your own init
file.  If those environment variables are absent, though, Emacs uses
your user-id to find your home directory.

@cindex デフォルトの初期化ファイル
@dfn{デフォルトの初期化ファイル}として@file{default.el}という名前のライブラリを
用意できる。
Emacsは、ライブラリを探索する標準パスからこのファイルを探す（@pxref{How Programs Do
Loading}）。
Emacsの配布にはこのファイルは付属しておらず、ローカルなカスタマイズのためにサイトで用意する。
バッチモードや@samp{-q}（または@samp{-Q}）を指定してある場合を除いて、
デフォルトの初期化ファイルが存在すると、読者がEmacsを
起動するたびにそれをロードする。
ただし、（存在するなら）個人の初期化ファイルが先にロードされる。
そこで@code{inhibit-default-init}に@code{nil}以外の値を設定すると、
Emacsはそのあとファイル@file{default.el}をロードしない。

サイトごとのカスタマイズ向けの別のファイルは@file{site-start.el}です。
Emacsはユーザーの初期化ファイルをロードする@emph{まえ}にこのファイルをロー
ドする。このファイルのロードを禁止するにはオプション
@samp{--no-site-file}を使う。

@defopt site-run-file
この変数は、ユーザーの初期化ファイルよりさきにロードするべきサイトごとの
カスタマイズファイルを指定する。通常の値は@code{"site-start"}である。実際
に効果があるようにこれを変更する唯一の方法は、Emacsをダンプするまえに行う
ことである。
@c So why even mention it here.  I imagine it is almost never changed.
@end defopt

読者のファイル@file{.emacs}でよく使われるであろうさまざまなカスタマイズを
行う方法の例については、
@xref{Init Examples,, Init File Examples, emacs, The GNU Emacs Manual}。

@defopt inhibit-default-init
この変数は、読者のEmacsセッションにおいては、デフォルトの初期化ライブラリ
ファイルをロードしないようにする。その値が@code{nil}以外であるとデフォル
トライブラリをロードしない。デフォルト値は@code{nil}である。
@end defopt

@defvar before-init-hook
すべての初期化ファイル（ユーザーの初期化ファイル、@file{default.el}と／あ
るいは@file{site-start.el}）をロードする直前に一度だけ実行するノーマルフッ
ク。（実際の効果があるようにこれを変更する唯一の方法は、Emacsをダンプする
まえに行うことである。）
@end defvar

@defvar after-init-hook
すべての初期化ファイル（ユーザーの初期化ファイル、@file{default.el}と／あ
るいは@file{site-start.el}）をロード直後、端末固有の初期化のまえに一度だ
け実行するノーマルフック。
@end defvar

@defvar emacs-startup-hook
This normal hook is run, once, just after handling the command line
arguments, just before @code{term-setup-hook}.  In batch mode, Emacs
does not run either of these hooks.
@end defvar

@defvar window-setup-hook
This normal hook is very similar to @code{emacs-startup-hook}.
The only difference is that it runs slightly later, after setting
of the frame parameters.  @xref{Startup Summary, window-setup-hook}.
@end defvar

@defvar user-init-file
This variable holds the absolute file name of the user's init file.  If the
actual init file loaded is a compiled file, such as @file{.emacs.elc},
the value refers to the corresponding source file.
@end defvar

@defvar user-emacs-directory
This variable holds the name of the @file{.emacs.d} directory.  It is
@file{~/.emacs.d} on all platforms but MS-DOS.
@end defvar

@node Terminal-Specific
@subsection 端末固有の初期化
@cindex 端末固有の初期化

各端末種類ごとに、Emacsがその種類の端末で動作するときにEmacsが
ロードする専用Lispライブラリを持つことができる。
ライブラリ名は、変数@code{term-file-prefix}の値と端末種類
（環境変数@env{TERM}）を連結して作られる。
通常、@code{term-file-prefix}の値は@code{"term/"}であり、
これを変更することは推奨されない。
@code{term-file-aliases}の連想リストに@env{TERM}にマッチする
エントリがあれば、Emacsは@env{TERM}の代わりに連想値を用いる。
Emacsはファイルを見つけるのに、通常どおり、
@code{load-path}のディレクトリ群において
@samp{.elc}と@samp{.el}の接尾辞でファイルを検索する。

@cindex Termcap
  The usual role of a terminal-specific library is to enable special
keys to send sequences that Emacs can recognize.  It may also need to
set or add to @code{input-decode-map} if the Termcap or Terminfo entry
does not specify all the terminal's function keys.  @xref{Terminal Input}.

端末種類の名前にハイフンまたはアンダースコア文字が含まれ、
かつ端末名と一致するライブラリが見つからない場合、
Emacsは端末名の最後のハイフンまたはアンダースコア文字より後の名前を除去して、
再度ライブラリの検索を試みます。この過程は適合するライブラリが見つかるか、
名前にハイフンまたはアンダースコア文字が無くなるまで（すなわち、端末特有の
ライブラリが無いことが確定するまで）繰り返されます。
例えば、端末名が @samp{xterm-256color}で、@file{term/xterm-256color.el}
ライブラリが無い場合、Emacsは@file{term/xterm.el}を検索します。
必要ならば、端末ライブラリは@code{(getenv "TERM")}を評価することで
端末種類の完全な名前を得ることができます。

初期設定ファイルで変数@code{term-file-prefix}に@code{nil}を設定すると、
端末固有ライブラリをロードしないようにできます。

変数@code{tty-setup-hook}を使うことで、端末固有ライブラリの特有の動作に
を変更できます。これは、新しいテキスト端末を初期化した後に
Emacsが実行するノーマルフックです。
端末専用ライブラリがない端末向けの初期化を定義するのにこの変数を
利用できます。
@xref{Hooks}。

@defopt term-file-prefix
@cindex 環境変数 @env{TERM}
変数@code{term-file-prefix}が@code{nil}以外であると、Emacsは、つぎのよう
に端末固有の初期化ファイルをロードする。

@example
(load (concat term-file-prefix (getenv "TERM")))
@end example

@noindent
端末固有の初期化ファイルをロードしたくない場合には、読者のファイル
@file{.emacs}で変数@code{term-file-prefix}に@code{nil}を設定する。それに
は、読者のファイル@file{.emacs}に@code{(setq term-file-prefix nil)}を入れ
る。

On MS-DOS, Emacs sets the @env{TERM} environment variable to @samp{internal}.
@end defopt

@defopt term-file-aliases
This variable is an an association list mapping terminal types to
their aliases.  For example, an element of the form @code{("vt102"
. "vt100")} means to treat a terminal of type @samp{vt102} like one of
type @samp{vt100}.
@end defopt

@defvar tty-setup-hook
この変数は、Emacsが新しい端末を初期化したあとにEmacsが実行するノーマルフッ
クである。
(This applies when Emacs starts up in non-windowed
mode, and when making a tty @command{emacsclient} connection.)  The
hook runs after loading your init file (if applicable) and the
terminal-specific Lisp file, so you can use it to adjust the
definitions made by that file.

関連する機能については、@pxref{Init File, window-setup-hook}。
@end defvar

@node Command-Line Arguments
@subsection コマンド行引数
@cindex コマンド行引数

Emacsの起動時にコマンド行引数を使ってさまざまな動作を要求できます。
Emacsの推奨される使い方は、一度起動した後、全ての編集作業を
同じセッションで行なうことです。
（@pxref{Entering Emacs,,, emacs, The GNU Emacs Manual}）
そのため、コマンド行引数はほとんど使いません。
nonetheless, they can be useful when invoking Emacs from session
scripts or debugging Emacs.
本節では、Emacsがコマンド行引数を処理する方法について述べます。

@defun command-line
この関数は、Emacsを呼び出すときに指定されたコマンド行引数を解析して処理し、
ユーザーのファイル初期設定ファイルをロードし始動メッセージを表示する。
@end defun

@defvar command-line-processed
この変数の値は、コマンド行引数を一度処理し終えると@code{t}である。

@code{dump-emacs}を呼んでEmacsを再ダンプするときには、
この変数に@code{nil}を設定すれば、
新たにダンプしたEmacsでコマンド行引数を処理するようにできる。
@end defvar

@defvar command-switch-alist
@cindex コマンド行のスイッチ
@cindex コマンド行のオプション
@cindex オプション、コマンド行
この変数の値は、ユーザー定義のコマンド行オプションと、
ハンドラ関数の連想リストである。
デフォルトでは空だが、必要に応じて要素を追加できる。

@dfn{コマンド行オプション}（command line option）は、
つぎの形のコマンド行の引数である。

@example
-@var{option}
@end example

@code{command-switch-alist}の要素はつぎの形である。

@example
(@var{option} . @var{handler-function})
@end example

The @sc{car}の@var{option}はコマンド行オプションの名前を示す文字列である
（オプション先頭のハイフンは含まれない）。
@var{handler-function}は、オプション@var{option}を処理するために呼ばれ、
オプション名を唯一の引数として受け取る。

コマンド行のオプションには引数が続く場合もある。そのような場合、
@var{handler-function}は変数@code{command-line-args-left}からすべての残り
のコマンド行引数を調べることができる。（コマンド行引数全体のリストは
@code{command-line-args}にある。）

コマンド行引数は、ファイル@file{startup.el}の関数@code{command-line-1}が
解析する。@ref{Emacs Invocation, , Command Line Arguments for Emacs
Invocation, emacs, The GNU Emacs Manual}も参照。
@end defvar

@defvar command-line-args
この変数の値は、Emacsに渡されたコマンド行引数のリストである。
@end defvar

@defvar command-line-args-left
@vindex argv
The value of this variable is the list of command-line arguments that
have not yet been processed.
@c Don't mention this, since it is a "bad name for a dynamically bound variable"
@c @code{argv} is an alias for this.
@end defvar

@defvar command-line-functions
この変数の値は、認識できないコマンド行引数を処理する関数のリストである。
つぎに処理する引数に特別な意味がないと、このリストの関数を@code{nil}以外
の値を返すまで現れる順に呼び出す。

これらの関数は引数なしで呼び出される。これらの関数では、呼び出し時に束縛
される変数@code{argi}を介して対象となるコマンド行引数を参照できる。（いま
対象となっている引数を除く）残りの引数は変数
@code{command-line-args-left}にある。

関数が@code{argi}を認識して処理したときには、その引数を処理したことを表す
ために@code{nil}以外の値を返すこと。後続の引数の一部も処理した場合には、
@code{command-line-args-left}からそれらを削除することで処理したことを示せ
る。

これらの関数すべてが@code{nil}を返すと、訪問するファイル名として引数を用
いる。
@end defvar

@node Getting Out
@section Emacsから抜ける
@cindex Emacsの終了

Emacsから抜けるには2つの方法がある。Emacsを終了するためにEmacsジョブをキ
ルするか、あとでEmacsを継続できるように休止する。実用上は、ログアウトする
とき以外にはEmacsをほとんど終了しない。Emacsを休止するほうが一般的である。

@menu
* Killing Emacs::        Exiting Emacs irreversibly.
* Suspending Emacs::     Exiting Emacs reversibly.
@end menu

@node Killing Emacs
@subsection Emacsの終了
@cindex 終了、Emacs

Emacsを終了するとは、Emacsプロセスの実行を終らせることを意味します。親プ
ロセスが普通は制御を取り戻します。Emacsを終了するための下位の基本関数は
@code{kill-emacs}です。

@deffn Command kill-emacs &optional exit-data
この関数は、@code{kill-emacs-hook}を呼び出し、
Emacsプロセスを終了する。

@var{exit-data}が整数であると、Emacsプロセスの終了状態として使われる。
（これは主にバッチ処理で有用である。@ref{Batch Mode}を参照。）

@var{exit-data}が文字列であると、その内容を端末入力バッファへ詰め込み、シェ
ル（やつぎに入力を読むプログラム）がそれらを読み取れるようにする。
@end deffn

@cindex SIGTERM
@cindex SIGHUP
@cindex SIGINT
@cindex operating system signal
  The @code{kill-emacs} function is normally called via the
higher-level command @kbd{C-x C-c}
(@code{save-buffers-kill-terminal}).  @xref{Exiting,,, emacs, The GNU
Emacs Manual}.  It is also called automatically if Emacs receives a
@code{SIGTERM} or @code{SIGHUP} operating system signal (e.g., when the
controlling terminal is disconnected), or if it receives a
@code{SIGINT} signal while running in batch mode (@pxref{Batch Mode}).

@defvar kill-emacs-hook
この変数は、@code{kill-emacs}がEmacsを終了する前に実行するノーマルフックである。

Because @code{kill-emacs} can be called in situations where user
interaction is impossible (e.g., when the terminal is disconnected),
functions on this hook should not attempt to interact with the user.
If you want to interact with the user when Emacs is shutting down, use
@code{kill-emacs-query-functions}, described below.
@end defvar

Emacsを終了すると、
保存済みのファイルを除くEmacsプロセス内のすべての情報は失われます。
Emacsを不注意に終了すると多くの作業を失うことになるので、
保存する必要があるバッファや、動作中のサブプロセスがあると、
@code{save-buffers-kill-terminal}が確認を求めます。
It also runs the abnormal hook @code{kill-emacs-query-functions}:

@defvar kill-emacs-query-functions
Emacsを終了する際、@code{save-buffers-kill-terminal}は、
標準的な質問を行った後、@code{kill-emacs}を呼び出す前に、
このフックにある関数を呼び出す。
関数は、現れる順に引数なしで呼び出される。
各関数では、ユーザーにさらなる確認を求めることができる。
これらのどれかが@code{nil}を返すと、@code{save-buffers-kill-emacs}はEmacsは終了させず、
またそれ以降の関数も実行しない。Calling @code{kill-emacs}
directly does not run this hook.
@end defvar

@node Suspending Emacs
@subsection Emacsの休止
@cindex 休止、Emacs

@dfn{Emacsを休止する}とは、Emacsを一時的に停止し、普通はシェルである親プ
ロセスに制御を戻すことです。これにより、あとで同じEmacsプロセスで、つまり、
同じバッファ群、同じキルリング、同じアンドゥ履歴などで編集を再開できます。
Emacsを再開するには、親シェルにおいてほとんどの場合@code{fg}などの適切な
コマンドを使います。

@cindex controlling terminal
  Suspending works only on a terminal device from which the Emacs
session was started.  We call that device the @dfn{controlling
terminal} of the session.  Suspending is not allowed if the
controlling terminal is a graphical terminal.  Suspending is usually
not relevant in graphical environments, since you can simply switch to
another application without doing anything special to Emacs.

@c FIXME?  Are there any systems Emacs still supports that do not
@c have SIGTSTP?
@cindex SIGTSTP
ジョブの休止（@code{SIGTSTP}）を扱えないオペレーティングシステムもあります。
そのようなシステムでは、『休止』はEmacsのサブプロセスとして一時的に新たな
シェルを実際には作成します。そのシェルを終了するとEmacsに戻ります。

@deffn Command suspend-emacs &optional string
この関数は、Emacsを休止し、親プロセスへ制御を戻す。親プロセスがEmacsを再
開した場合にのみ、@code{suspend-emacs}はLisp内の呼び出し側へ@code{nil}を
返す。

This function works only on the controlling terminal of the Emacs
session; to relinquish control of other tty devices, use
@code{suspend-tty} (see below).  If the Emacs session uses more than
one terminal, you must delete the frames on all the other terminals
before suspending Emacs, or this function signals an error.
@xref{Multiple Terminals}.

@var{string}が@code{nil}以外であると、Emacsの親シェルが端末入力として読め
るようにその文字群を送る。
@c FIXME?  It seems to me that shell does echo STRING.
親シェルは@var{string}の文字群を表示せず、その結果のみが現れる。

休止するまえに、@code{suspend-emacs}はノーマルフック@code{suspend-hook}を
実行する。
ユーザーがEmacsを再開すると、@code{suspend-emacs}はノーマルフック
@code{suspend-resume-hook}を実行する。@xref{Hooks}。

再開後のつぎの再表示では、変数@code{no-redraw-on-reenter}が@code{nil}なら
ばスクリーン全体を再描画する。@xref{Refresh Screen}。

つぎの例では、Emacsを休止しても@samp{pwd}は表示されないことに注意。しかし、
シェルはそれを読み取って実行する。

@smallexample
@group
(add-hook 'suspend-hook
          (lambda () (or (y-or-n-p "Really suspend? ")
                         (error "Suspend canceled"))))
@end group
(add-hook 'suspend-resume-hook (lambda () (message "Resumed!")
                                 (sit-for 2)))
@end smallexample
@c The sit-for prevents the @code{nil} that suspend-emacs returns
@c hiding the message.

Here is what you would see upon evaluating @code{(suspend-emacs "pwd")}:

@smallexample
@group
---------- Buffer: Minibuffer ----------
Really suspend? @kbd{y}
---------- Buffer: Minibuffer ----------
@end group

@group
---------- Parent Shell ----------
bash$ /home/username
bash$ fg
@end group

@group
---------- Echo Area ----------
Resumed!
@end group
@end smallexample

@c FIXME?  AFAICS, it is echoed.
Note that @samp{pwd} is not echoed after Emacs is suspended.  But it
is read and executed by the shell.
@end deffn

@defvar suspend-hook
この変数は、休止するまえに実行されるノーマルフックである。
@end defvar

@defvar suspend-resume-hook
この変数は、再開後に実行されるノーマルフックである。
@end defvar

@defun suspend-tty &optional tty
If @var{tty} specifies a terminal device used by Emacs, this function
relinquishes the device and restores it to its prior state.  Frames
that used the device continue to exist, but are not updated and Emacs
doesn't read input from them.  @var{tty} can be a terminal object, a
frame (meaning the terminal for that frame), or @code{nil} (meaning
the terminal for the selected frame).  @xref{Multiple Terminals}.

If @var{tty} is already suspended, this function does nothing.

@vindex suspend-tty-functions
This function runs the hook @code{suspend-tty-functions}, passing the
terminal object as an argument to each function.
@end defun

@defun resume-tty &optional tty
This function resumes the previously suspended terminal device
@var{tty}; where @var{tty} has the same possible values as it does
for @code{suspend-tty}.

@vindex resume-tty-functions
This function reopens the terminal device, re-initializes it, and
redraws it with that terminal's selected frame.  It then runs the
hook @code{resume-tty-functions}, passing the terminal object as an
argument to each function.

If the same device is already used by another Emacs terminal, this
function signals an error.  If @var{tty} is not suspended, this
function does nothing.
@end defun

@defun controlling-tty-p &optional tty
This function returns non-@code{nil} if @var{tty} is the
controlling terminal of the Emacs session; @var{tty} can be a
terminal object, a frame (meaning the terminal for that frame), or
@code{nil} (meaning the terminal for the selected frame).
@end defun

@deffn Command suspend-frame
This command @dfn{suspends} a frame.  For GUI frames, it calls
@code{iconify-frame} (@pxref{Visibility of Frames}); for frames on
text terminals, it calls either @code{suspend-emacs} or
@code{suspend-tty}, depending on whether the frame is displayed on the
controlling terminal device or not.
@end deffn

@node System Environment
@section オペレーティングシステム環境
@cindex オペレーティングシステム環境

Emacsでは、さまざまな関数を介して
オペレーティングシステム環境の変数を参照できます。
これらの変数には、システムの名前、ユーザーの識別番号@sc{uid}などが
含まれます。

@defvar system-configuration
この変数は、読者のシステムのハードウェア／ソフトウェア構成に対する
GNUの構成名を文字列で保持している。For
example, a typical value for a 64-bit GNU/Linux system is
@samp{"x86_64-unknown-linux-gnu"}.
@end defvar

@cindex system type and name
@defvar system-type
この変数の値は、Emacsが動作している
オペレーティングシステムの種類を表すシンボルである。
つぎに可能な値の一覧を示す。

@table @code
@item aix
IBM's AIX。

@item berkeley-unix
バークレーBSD。

@item cygwin
Cygwin, a Posix layer on top of MS-Windows.

@item darwin
Darwin (Mac OS X).

@item gnu
（HURDかMachから成るGNUカーネルを使っている）GNUシステム。

@item gnu/linux
GNU/Linuxシステム。
つまり、Linuxカーネルを用いたGNUシステムの変種。
（これらのシステムは人々が『Linux』と呼ぶものの1つであるが、
Linxuは実際にはカーネルのみであり、システム全体ではない。）

@item gnu/kfreebsd
A GNU (glibc-based) system with a FreeBSD kernel.

@item hpux
ヒューレットパッカードHPUXオペレーティングシステム。

@item irix
シリコングラフィックスIrixシステム。

@item ms-dos
マイクロソフトMS-DOS。  Emacs compiled with DJGPP for MS-DOS binds
@code{system-type} to @code{ms-dos} even when you run it on MS-Windows.

@item usg-unix-v
AT&T System V。

@item windows-nt
Microsoft Windows NT, 9X and later.  The value of @code{system-type}
is always @code{windows-nt}, e.g., even on Windows 7.

@end table

絶対に必要でない限り、細分類のために新たなシンボルを追加したくない！
実際、将来にはこれらのいくつかを削除することを願っている。@code{system-type}よりも
細かいオペレーティングシステムの違いを区別するには、
@code{system-configuration}を、正規表現等に対して使うことを勧める。
@end defvar

@defun system-name
この関数は読者が使っているマシンの名前を返す。
@end defun

@c FIXME seems like this section is not the best place for this option?
@defopt mail-host-address
この変数が@code{nil}以外であると、@code{system-name}のかわりに電子メイル
アドレスの生成に使われる。たとえば、@code{user-mail-address}のデフォルト
値の作成に使われる。@xref{User Identification}。（これはEmacsの始動時に
行われるため、Emacsをダンプしたときの値が実際に使われる値である。
@xref{Building Emacs}）。
@c FIXME sounds like should probably give this a :set-after and some
@c custom-initialize-delay voodoo.
@end defopt

@deffn Command getenv var &optional frame
@cindex 環境変数の参照
この関数は、環境変数@var{var}の値を文字列で返す。
@var{var} should be a string.  If @var{var} is undefined
in the environment, @code{getenv} returns @code{nil}.  It returns
@samp{""} if @var{var} is set but null.
Emacs内部では、環境変数の値はLisp変数@code{process-environment}に
保持されている。

@example
@group
(getenv "USER")
     @result{} "lewis"
@end group
@end example

The shell command @code{printenv} prints all or part of the environment:

@example
@group
bash$ printenv
PATH=/usr/local/bin:/usr/bin:/bin
USER=lewis
@end group
@group
TERM=xterm
SHELL=/bin/bash
HOME=/home/lewis
@end group
@dots{}
@end example
@end deffn

@deffn Command setenv variable &optional value substitute
このコマンドは、環境変数@var{variable}に値@var{value}を設定する。@var{variable}
は文字列である。
Internally, Emacs Lisp can handle any string.  However, normally
@var{variable} should be a valid shell identifier, that is, a sequence
of letters, digits and underscores, starting with a letter or
underscore.  Otherwise, errors may occur if subprocesses of Emacs try
to access the value of @var{variable}.  If @var{value} is omitted or
@code{nil} (or, interactively, with a prefix argument), @code{setenv}
removes @var{variable} from the environment.  Otherwise, @var{value}
should be a string.

@c FIXME: Document 'substitute-env-vars'?  --xfq
If the optional argument @var{substitute} is non-@code{nil}, Emacs
calls the function @code{substitute-env-vars} to expand any
environment variables in @var{value}.

@code{setenv}は@code{process-environment}を修正することで
動作する。この変数を@code{let}で束縛しても十分に実用的である。

@code{setenv} returns the new value of @var{variable}, or @code{nil}
if it removed @var{variable} from the environment.
@end deffn

@defvar process-environment
この変数は、各要素が1つの環境変数を記述する文字列のリストである。
関数@code{getenv}と@code{setenv}は、この変数を用いて動作する。

@smallexample
@group
process-environment
@result{} ("PATH=/usr/local/bin:/usr/bin:/bin"
    "USER=lewis"
@end group
@group
    "TERM=xterm"
    "SHELL=/bin/bash"
    "HOME=/home/lewis"
    @dots{})
@end group
@end smallexample

If @code{process-environment} contains ``duplicate'' elements that
specify the same environment variable, the first of these elements
specifies the variable, and the other ``duplicates'' are ignored.
@end defvar

@defvar initial-environment
This variable holds the list of environment variables Emacs inherited
from its parent process when Emacs started.
@end defvar

@defvar path-separator
この変数は、（環境変数などで）探索パスを
区切る文字を指定する文字列を保持する。
UNIXとGNUシステムではその値は@code{":"}であり、
MS-DOSとWidows NTでは@code{";"}である。
@end defvar

@defun parse-colon-path path
This function takes a search path string such as the value of
the @env{PATH} environment variable, and splits it at the separators,
returning a list of directory names.  @code{nil} in this list means
the current directory.  Although the function's name says
``colon'', it actually uses the value of @code{path-separator}.

@example
(parse-colon-path ":/foo:/bar")
     @result{} (nil "/foo/" "/bar/")
@end example
@end defun

@defvar invocation-name
この変数は、起動したEmacsのプログラム名を保持する。値は文字列であり、ディ
レクトリ名は含まない。
@end defvar

@defvar invocation-directory
この変数は、起動したEmacsの実行形式のディレクトリを保持する。
ディレクトリを判別できない場合には@code{nil}である。
@end defvar

@defvar installation-directory
@code{nil}以外であると、サブディレクトリ@file{lib-src}と@file{etc}を
探すためのディレクトリである。
通常、インストールされたEmacsではこの変数は@code{nil}である。
Emacsがこれらのディレクトリを標準のインストールディレクトリで
みつけられなくてもEmacsの実行ファイルになんらかの意味で
関連するディレクトリでみつけられれば（例えば@code{invocation-directory}）、
この変数は@code{nil}以外になる。
@end defvar

@defun load-average &optional use-float
この関数は、1分間／5分間／15分間のロードアベレッジ（負荷平均）をリストで
返す。The load average indicates the
number of processes trying to run on the system.

デフォルトでは、これらの値は、動作しようとしてるプロセスの平均個数を表す
システムのロードアベレッジを100倍した整数である。@var{use-float}が
@code{nil}以外であると、100倍しない浮動小数点数で返す。

If it is impossible to obtain the load average, this function signals
an error.  On some platforms, access to load averages requires
installing Emacs as setuid or setgid so that it can read kernel
information, and that usually isn't advisable.
@c FIXME which platforms are these?  Are they still relevant?

If the 1-minute load average is available, but the 5- or 15-minute
averages are not, this function returns a shortened list containing
the available averages.

@example
@group
(load-average)
     @result{} (169 48 36)
@end group
@group
(load-average t)
     @result{} (1.69 0.48 0.36)
@end group
@end example

The shell command @code{uptime} returns similar information.
@end defun

@defun emacs-pid
この関数は、Emacsプロセスのプロセス番号@sc{id}を返す。
@end defun

@defvar tty-erase-char
この変数は、Emacsが始動するまえにシステムの端末ドライバが選んでいた消去文
字を保持する。
@c FIXME?  Seems untrue since 23.1.  For me, it is 0.
@c The value is @code{nil} if Emacs is running under a window system.
@end defvar

@node User Identification
@section ユーザーの識別
@cindex ユーザーの識別

@defvar init-file-user
この変数は、Emacsが使用すべきユーザー初期化ファイルを指定する。あるいは、
そのようなものがなければ@code{nil}である。
@code{""}は、もとからログインしたユーザを意味する。
この値は、@samp{-q}や@samp{-u @var{user}}のコマンド行オプションを反映する。

カスタマイズファイルや他の種類のユーザープロフィールをロードするLispパッ
ケージは、それらを探す場所を判断するためにこの変数に従うこと。この変数の
ユーザー名のカスタマイズをロードするべきである。@code{init-file-user}が
@code{nil}であるとオプション@samp{-q}や@samp{-Q}、@samp{-batch}が
使われたことを意味し、Lispパッケージはいかなるカスタマイズファイルや
ユーザープロフィールもロードしないこと。
@end defvar

@defopt user-mail-address
これは、Emacsを使用しているユーザーの通常の電子メイルアドレスを保持する。
Emacsは通常、読者の初期化ファイルを読み取ったあと、この変数が未設定である
とデフォルト値を設定する。したがって、デフォルト値を使いたくない場合には、
読者のファイル@file{~/.emacs}で別の値に設定できる。
@end defopt

@defun user-login-name &optional uid
この関数はログインしたユーザー名を返す。環境変数
@env{LOGNAME}または@env{USER}が設定されていればその値を使う。
さもなければ、実@acronym{UID}ではなく実効
@acronym{UID}に基づいた値である。

@var{uid}（整数）を指定すると、@var{uid}に対応するユーザー名が返るか、
そのようなユーザがいない場合は@code{nil}が返る。
@end defun

@defun user-real-login-name
この関数は、Emacsの実@acronym{UID}に対応するユーザー名を返す。
これは、実効@acronym{UID}や
環境変数@env{LOGNAME}と@env{USER}を無視する。
@end defun

@defun user-full-name &optional uid
この関数は、ログインしたユーザーの氏名を返す。あるいは、環境変数
@env{NAME}が設定してあればその値を返す。

If the Emacs process's user-id does not correspond to any known user (and
provided @code{NAME} is not set), the result is @code{"unknown"}.

@var{uid}が@code{nil}以外であると、
それは整数のユーザー番号か文字列のログイン名であること。
すると、@code{user-full-name}は、そのユーザー番号かログイン名に
対応するユーザーの氏名を返す。
If you specify a
user-id or login name that isn't defined, it returns @code{nil}.
@end defun

@vindex user-full-name
@vindex user-real-login-name
@vindex user-login-name
シンボル@code{user-login-name}、@code{user-real-login-name}、
@code{user-full-name}は、関数でもある変数です。関数としては、その変数が保
持する値と同じ値を返します。これらの変数により、関数として返す値を指定し
ておくことでEmacsを『ごまかせ』ます。これらの変数は、フレームタイトルの作
成にも有用です（@pxref{Frame Titles}）。

@cindex UID
@defun user-real-uid
この関数は、ユーザーの実@acronym{UID}を返す。
The value may be floating point, in the (unlikely) event that
the UID is too large to fit in a Lisp integer.
@end defun

@defun user-uid
この関数は、ユーザーの実効@acronym{UID}を返す。
The value may be floating point.
@end defun

@cindex GID
@defun group-gid
This function returns the effective @acronym{GID} of the Emacs process.
The value may be floating point.
@end defun

@defun group-real-gid
This function returns the real @acronym{GID} of the Emacs process.
The value may be floating point.
@end defun

@defun system-users
This function returns a list of strings, listing the user names on the
system.  If Emacs cannot retrieve this information, the return value
is a list containing just the value of @code{user-real-login-name}.
@end defun

@cindex user groups
@defun system-groups
This function returns a list of strings, listing the names of user
groups on the system.  If Emacs cannot retrieve this information, the
return value is @code{nil}.
@end defun


@node Time of Day
@section 時刻
@cindex 時刻

本節では、現在時刻と時刻帯（タイムゾーン）を調べる方法を説明します。

@cindex epoch
  Most of these functions represent time as a list of four integers
@code{(@var{sec-high} @var{sec-low} @var{microsec} @var{picosec})}.
This represents the number of seconds from the @dfn{epoch} (January
1, 1970 at 00:00 UTC), using the formula:
@ifnottex
@var{high} * 2**16 + @var{low} + @var{micro} * 10**@minus{}6 +
@var{pico} * 10**@minus{}12.
@end ifnottex
@tex
$high*2^{16} + low + micro*10^{-6} + pico*10^{-12}$.
@end tex
The return value of @code{current-time} represents time using this
form, as do the timestamps in the return values of other functions
such as @code{file-attributes} (@pxref{Definition of
file-attributes}).  In some cases, functions may return two- or
three-element lists, with omitted @var{microsec} and @var{picosec}
components defaulting to zero.

@cindex time value
  Function arguments, e.g., the @var{time-value} argument to
@code{current-time-string}, accept a more-general @dfn{time value}
format, which can be a list of integers as above, or a single number
for seconds since the epoch, or @code{nil} for the current time.  You
can convert a time value into a human-readable string using
@code{current-time-string} and @code{format-time-string}, into a list
of integers using @code{seconds-to-time}, and into other forms using
@code{decode-time} and @code{float-time}.  These functions are
described in the following sections.

@defun current-time-string &optional time-value
この関数は、人間向けの文字列で現在時刻と日付を返す。
文字列の最初の、曜日・月・日・時間の順番で並ぶ最初の部分の書式は不変である。
各部分の文字数はつねに同じなので、各部分を取り出すのに
@code{substring}を使っても問題ない。将来、文字列の末尾に追加情報を付加す
ることもあるので、文字列の末尾からではなく先頭から文字を数えるほうがよい。

引数@var{time-value}を指定すると、それは現在時刻のかわりに書式付けする時
刻を指定する。

@example
@group
(current-time-string)
     @result{} "Wed Oct 14 22:21:05 1987"
@end group
@end example
@end defun

@defun current-time
この関数は、システムの時刻の値を4つの整数のリスト
@code{(@var{sec-high} @var{sec-low} @var{microsec} @var{picosec})}を返す。
These integers have trailing zeros on systems that return time with
lower resolutions.  On all current machines @var{picosec} is a
multiple of 1000, but this may change as higher-resolution clocks
become available.
@end defun

@defun float-time &optional time-value
This function returns the current time as a floating-point number of
seconds since the epoch.  The optional argument @var{time-value}, if
given, specifies a time to convert instead of the current time.

@emph{Warning}: Since the result is floating point, it may not be
exact.  Do not use this function if precise time stamps are required.

@code{time-to-seconds} is an alias for this function.
@end defun

@defun seconds-to-time time-value
This function converts a time value to list-of-integer form.
For example, if @var{time-value} is a number, @code{(time-to-seconds
(seconds-to-time @var{time-value}))} equals the number unless overflow
or rounding errors occur.
@end defun

@defun current-time-zone &optional time-value
@cindex time zone, current
この関数は、ユーザーの地域の時刻帯を記述するリストを返す。

値は、@code{(@var{offset} @var{name})}の形である。
ここで、@var{offset}はUTC
@footnote{【訳注】協定世界時。旧グリニッジ標準時に相当。}
に対して進んでいる（グリニッジの東）秒数を
与える整数である。
第2要素@var{name}は、その時刻帯の名称を与える文字列である。
夏時間制が始まったり終ると、どちらの要素も変わる。
時刻帯には季節の時刻調整はないとユーザーが指定すると、
どちらの値も定数である。

値を計算するために必要な情報をオペレーティングシステムから得られないと
リストのどちらの要素も@code{nil}である。

引数@var{time-value}を指定すると、
現在時刻のかわりに分析すべき時刻を指定する。
@end defun

The current time zone is determined by the @env{TZ} environment
variable.  @xref{System Environment}.  For example, you can tell Emacs
to use universal time with @code{(setenv "TZ" "UTC0")}.  If @env{TZ}
is not in the environment, Emacs uses a platform-dependent default
time zone.

@node Time Conversion
@section 時刻の変換
@cindex calendrical information
@cindex time conversion

これらの関数は、時刻の値（@pxref{Time of Day}）を
文字列や日時情報に変換します。

多くのオペレーティングシステムでは、時刻の値を秒の部分で32ビットに制限しています。
これらのシステムでは、典型的には協定世界時1901年12月13日20:45:52から
2038年1月19日03:14:07までしか表現できません。
しかし、６４ビットと幾つかの３２ビットオペレーティング・システムでは、
より大きな時刻の値を扱い、より広い範囲の過去から未来を表現できます。

時刻変換関数は、グレゴリオ暦を導入する前であっても
つねにグレゴリオ暦を使います。
年は紀元前1年からの経過年数を数え、通常のグレゴリオ暦のように0年を飛ばしません。
たとえば、@minus{}37年は、グレゴリオ暦紀元前38年を表します。

@defun decode-time &optional time-value
この関数は、時刻の値を日付情報に変換する。If
you don't specify @var{time-value}, it decodes the current time.
戻り値は、つぎの9要素のリストである。

@example
(@var{seconds} @var{minutes} @var{hour} @var{day} @var{month} @var{year} @var{dow} @var{dst} @var{zone})
@end example

各要素の意味はつぎのとおりである。

@table @var
@item sec
0から59の整数で表した分内の秒数。
On some operating systems, this is 60 for leap seconds.
@item minute
0から59の整数で表した時内の分数。
@item hour
0から23の整数で表した日内の時。
@item day
1から31の整数で表した月内の日。
@item month
1から12の整数で表した年内の月。
@item year
年。
典型的には1900より大きい。
@item dow
日曜日を0とした0から6の整数で表した曜日。
@item dst
夏時間制が有効であると@code{t}、さもなければ@code{nil}。
@item zone
グリニッジから東周りではかった時刻帯を表す秒数。
@end table

@strong{Common Lisp Note:} 
Common Lispでは、@var{dow}と@var{zone}の意味が異なる。
@end defun

@defun encode-time seconds minutes hour day month year &optional zone
この関数は@code{decode-time}の逆である。
7項目から成る日時情報を時刻の値に変換する。
引数の意味については、上記@code{decode-time}の一覧を参照。

100未満の年は普通の年として扱う。
それらを1900年代として扱いたい場合には、
@code{encode-time}を呼び出すまえに修正しておくこと。

省略可能な引数@var{zone}のデフォルトは、
現在の時刻帯とその夏時間制の規則である。
指定する場合には、（@code{current-time-zone}で得られるような）リストであるか、
環境変数@env{TZ}と同じ形式の文字列であるか、
協定世界時ならば@code{t}であるか、
（@code{decode-time}で得られるような）整数であること。
指定した時刻帯は、夏時間の補正をせずに使われる。

@code{encode-time}に7引数より多く渡すと、
始めの6つを@var{seconds}から@var{year}までに、
最後の引数を@var{zone}に使い、そのあいだの引数は無視する。
この機能は、@code{decode-time}が返したリストの要素を
つぎのようにして@code{encode-time}の引数に使うことを可能にする。

@example
(apply 'encode-time (decode-time @dots{}))
@end example

引数@var{seconds}、@var{minutes}、@var{hour}、@var{day}、@var{month}の
値が範囲外になるようにすると単純な日時演算を行える。
たとえば、0日はその月のまえの日を意味する。

オペレーティングは可能な時刻の値の範囲を制限する。
その範囲を越える時刻を符号化しようとするとエラーになる。
For instance, years before 1970 do not work on some systems;
on others, years as early as 1901 do work.
@end defun

@node Time Parsing
@section Parsing and Formatting Times
@cindex time parsing
@cindex time formatting
@cindex formatting time values

  These functions convert time values to text in a string, and vice versa.
Time values are lists of two to four integers (@pxref{Time of Day}).

@defun date-to-time string
This function parses the time-string @var{string} and returns the
corresponding time value.
@end defun

@defun format-time-string format-string &optional time-value universal

この関数は、@var{time-value}（または@var{time-value}が省略された
場合は現在時刻）を@var{format-string}に従って文字列に変換する。
引数@var{format-string}には、時刻のさまざまな部分で置き換えられる
@samp{%}列を含んでよい。
@samp{%}列の意味を以下に示す。

@table @samp
@item %a
曜日の省略名を表す。
@item %A
曜日の（省略しない）名称を表す。
@item %b
月の省略名を表す。
@item %B
月の（省略しない）名称を表す。
@item %c
@samp{%x %X}の同義語。
@item %C
これにはローケル固有の意味がある。
デフォルトのローケル（Cと呼ばれる）では、@samp{%A, %B %e, %Y}と等価。
@item %d
ゼロでパディングした月内の日。
@item %D
@samp{%m/%d/%y}の同義語。
@item %e
空白でパディングした月内の日。
@item %h
@samp{%b}の同義語。
@item %H
時（00-23）を表す。
@item %I
時（00-12）を表す。
@item %j
年内の日（001-366）を表す。
@item %k
空白でパディングした時（0-23）を表す。
@item %l
空白でパディングした時（0-12）を表す。
@item %m
月（01-12）を表す。
@item %M
分（00-59）を表す。
@item %n
改行を表す。
@item %N
This stands for the nanoseconds (000000000--999999999).  To ask for
fewer digits, use @samp{%3N} for milliseconds, @samp{%6N} for
microseconds, etc.  Any excess digits are discarded, without rounding.
@item %p
@samp{AM}か@samp{PM}の適切なほうを表す。
@item %r
@samp{%I:%M:%S %p}の同義語。
@item %R
@samp{%H:%M}の同義語。
@item %S
秒（00-60）を表す。
@item %t
タブ文字を表す。
@item %T
@samp{%H:%M:%S}の同義語。
@item %U
日曜日を週の始まりと仮定した年内の週（01-52）を表す。
@item %w
数字で表した曜日（0-6）。
日曜日を0とする。
@item %W
月曜日を週の始まりと仮定した年内の週（01-52）を表す。
@item %x
これにはローケル固有の意味がある。
デフォルトのローケル（@samp{C}）では、@samp{%D}と等価。
@item %X
これにはローケル固有の意味がある。
デフォルトのローケル（@samp{C}）では、@samp{%T}と等価。
@item %y
年の下2桁（00-99）を表す。
@item %Y
100年単位の年を表す。
@item %Z
時刻帯の省略名を表す。（例：@samp{EST}）
@item %z
This stands for the time zone numerical offset (e.g., @samp{-0500}).
@end table

これらの@samp{%}列には、桁数やパディングの種類も指定できる。
@code{printf}と同様に動作し、
@samp{%}列のあいだに桁数を数字で指定する。
桁数を@samp{0}で始めるとゼロでパディングすることを意味する。
桁数を@samp{_}で始めると空白でパディングすることを意味する。

たとえば、@samp{%S}は分内の秒数を指定し、
@samp{%03S}はゼロでパディングして3桁にすることを意味し、
@samp{%_3S}は空白でパディングして3桁にすることを意味する。
@samp{%S}は普通はパディングして2桁にするため、
@samp{%3S}だけであるとゼロでパディングする。

The characters @samp{E} and @samp{O} act as modifiers when used between
@samp{%} and one of the letters in the table above.  @samp{E} specifies
using the current locale's ``alternative'' version of the date and time.
In a Japanese locale, for example, @code{%Ex} might yield a date format
based on the Japanese Emperors' reigns.  @samp{E} is allowed in
@samp{%Ec}, @samp{%EC}, @samp{%Ex}, @samp{%EX}, @samp{%Ey}, and
@samp{%EY}.

@samp{O} means to use the current locale's ``alternative''
representation of numbers, instead of the ordinary decimal digits.  This
is allowed with most letters, all the ones that output numbers.

If @var{universal} is non-@code{nil}, that means to describe the time as
Universal Time; @code{nil} means describe it using what Emacs believes
is the local time zone (see @code{current-time-zone}).

This function uses the C library function @code{strftime}
(@pxref{Formatting Calendar Time,,, libc, The GNU C Library Reference
Manual}) to do most of the work.  In order to communicate with that
function, it first encodes its argument using the coding system
specified by @code{locale-coding-system} (@pxref{Locales}); after
@code{strftime} returns the resulting string,
@code{format-time-string} decodes the string using that same coding
system.
@end defun

@defun format-seconds format-string seconds
This function converts its argument @var{seconds} into a string of
years, days, hours, etc., according to @var{format-string}.  The
argument @var{format-string} may contain @samp{%}-sequences which
control the conversion.  Here is a table of what the
@samp{%}-sequences mean:

@table @samp
@item %y
@itemx %Y
The integer number of 365-day years.
@item %d
@itemx %D
The integer number of days.
@item %h
@itemx %H
The integer number of hours.
@item %m
@itemx %M
The integer number of minutes.
@item %s
@itemx %S
The integer number of seconds.
@item %z
Non-printing control flag.  When it is used, other specifiers must be
given in the order of decreasing size, i.e., years before days, hours
before minutes, etc.  Nothing will be produced in the result string to
the left of @samp{%z} until the first non-zero conversion is
encountered.  For example, the default format used by
@code{emacs-uptime} (@pxref{Processor Run Time, emacs-uptime})
@w{@code{"%Y, %D, %H, %M, %z%S"}} means that the number of seconds
will always be produced, but years, days, hours, and minutes will only
be shown if they are non-zero.
@item %%
Produces a literal @samp{%}.
@end table

Upper-case format sequences produce the units in addition to the
numbers, lower-case formats produce only the numbers.

You can also specify the field width by following the @samp{%} with a
number; shorter numbers will be padded with blanks.  An optional
period before the width requests zero-padding instead.  For example,
@code{"%.3Y"} might produce @code{"004 years"}.

@emph{Warning:} This function works only with values of @var{seconds}
that don't exceed @code{most-positive-fixnum} (@pxref{Integer Basics,
most-positive-fixnum}).
@end defun

@node Processor Run Time
@section Processor Run time
@cindex processor run time
@cindex Emacs process run time

  Emacs provides several functions and primitives that return time,
both elapsed and processor time, used by the Emacs process.

@deffn Command emacs-uptime &optional format
@cindex uptime of Emacs
This function returns a string representing the Emacs
@dfn{uptime}---the elapsed wall-clock time this instance of Emacs is
running.  The string is formatted by @code{format-seconds} according
to the optional argument @var{format}.  For the available format
descriptors, see @ref{Time Parsing, format-seconds}.  If @var{format}
is @code{nil} or omitted, it defaults to @code{"%Y, %D, %H, %M,
%z%S"}.

When called interactively, it prints the uptime in the echo area.
@end deffn

@defun get-internal-run-time
This function returns the processor run time used by Emacs as a list
of four integers: @code{(@var{sec-high} @var{sec-low} @var{microsec}
@var{picosec})}, using the same format as @code{current-time}
(@pxref{Time of Day}).

Note that the time returned by this function excludes the time Emacs
was not using the processor, and if the Emacs process has several
threads, the returned value is the sum of the processor times used up
by all Emacs threads.

If the system doesn't provide a way to determine the processor run
time, @code{get-internal-run-time} returns the same time as
@code{current-time}.
@end defun

@deffn Command emacs-init-time
This function returns the duration of the Emacs initialization
(@pxref{Startup Summary}) in seconds, as a string.  When called
interactively, it prints the duration in the echo area.
@end deffn

@node Time Calculations
@section Time Calculations
@cindex time calculations
@cindex comparing time values
@cindex calendrical computations

  These functions perform calendrical computations using time values
(@pxref{Time of Day}).

@defun time-less-p t1 t2
This returns @code{t} if time value @var{t1} is less than time value
@var{t2}.
@end defun

@defun time-subtract t1 t2
This returns the time difference @var{t1} @minus{} @var{t2} between
two time values, as a time value.
@end defun

@defun time-add t1 t2
This returns the sum of two time values, as a time value.
One argument should represent a time difference rather than a point in time.
Here is how to add a number of seconds to a time value:

@example
(time-add @var{time} @var{seconds})
@end example
@end defun

@defun time-to-days time-value
This function returns the number of days between the beginning of year
1 and @var{time-value}.
@end defun

@defun time-to-day-in-year time-value
This returns the day number within the year corresponding to @var{time-value}.
@end defun

@defun date-leap-year-p year
This function returns @code{t} if @var{year} is a leap year.
@end defun

@node Timers
@section 遅延実行のためのタイマ
@cindex タイマ

未来の指定した時間に、あるいは
ある一定期間、何もしないでいたら関数を呼び出すために
@dfn{タイマ}を設定することができる。

Emacsは、Lispプログラムの任意の箇所でタイマを実行できるわけではない。
Emacsがサブプロセスからの出力を受け取れるときにのみ、タイマを実行できる。
すなわち、待つことが@emph{可能}な@code{sit-for}や@code{read-event}などの
基本関数の内側や（入力を）待っているあいだのみ、タイマを実行できる。
したがって、Emacsが忙しいとタイマの実行が遅れることがあります。
しかし、Emacsが暇ならば、タイマは非常に正確に実行される。

  Emacs binds @code{inhibit-quit} to @code{t} before calling the timer
function, because quitting out of many timer functions can leave
things in an inconsistent state.  This is normally unproblematical
because most timer functions don't do a lot of work.  Indeed, for a
timer to call a function that takes substantial time to run is likely
to be annoying.  If a timer function needs to allow quitting, it
should use @code{with-local-quit} (@pxref{Quitting}).  For example, if
a timer function calls @code{accept-process-output} to receive output
from an external process, that call should be wrapped inside
@code{with-local-quit}, to ensure that @kbd{C-g} works if the external
process hangs.

  It is usually a bad idea for timer functions to alter buffer
contents.  When they do, they usually should call @code{undo-boundary}
both before and after changing the buffer, to separate the timer's
changes from user commands' changes and prevent a single undo entry
from growing to be quite large.

  Timer functions should also avoid calling functions that cause Emacs
to wait, such as @code{sit-for} (@pxref{Waiting}).  This can lead to
unpredictable effects, since other timers (or even the same timer) can
run while waiting.  If a timer function needs to perform an action
after a certain time has elapsed, it can do this by scheduling a new
timer.

  If a timer function calls functions that can change the match data,
it should save and restore the match data.  @xref{Saving Match Data}.

@deffn Command run-at-time time repeat function &rest args
この関数は、時刻@var{time}に引数@var{args}で
関数@var{function}を呼び出すよう、タイマを設定する。
If @var{repeat} is a number
(integer or floating point), the timer is scheduled to run again every
@var{repeat} seconds after @var{time}.  If @var{repeat} is @code{nil},
the timer runs only once.

@var{time} may specify an absolute or a relative time.

絶対時刻は文字列を用いて、制限された様々な書式で指定でき、
過去のものであっても@emph{今日}の日付として捉えられる。
The recognized forms are @samp{@var{xxxx}},
@samp{@var{x}:@var{xx}}, or @samp{@var{xx}:@var{xx}} (military time),
and @samp{@var{xx}am}, @samp{@var{xx}AM}, @samp{@var{xx}pm},
@samp{@var{xx}PM}, @samp{@var{xx}:@var{xx}am},
@samp{@var{xx}:@var{xx}AM}, @samp{@var{xx}:@var{xx}pm}, or
@samp{@var{xx}:@var{xx}PM}.  A period can be used instead of a colon
to separate the hour and minute parts.

相対時刻を指定するには、単位を伴った数字を使う。
たとえばつぎのとおり。

@table @samp
@item 1 min
今から1分後。
@item 1 min 5 sec
今から65秒後。
@item 1 min 2 sec 3 hour 4 day 5 week 6 fortnight 7 month 8 year
今からちょうど103ヵ月、123日、10862秒後。
@footnote{【訳注】fortnightは2週間のこと。}
@end table

For relative time values, Emacs considers a month to be exactly thirty
days, and a year to be exactly 365.25 days.

Not all convenient formats are strings.
@var{time}が数（整数か浮動小数点数）であれば、
秒単位の相対時刻を指定する。
The result of @code{encode-time} can also be used to specify
an absolute value for @var{time}.

ほとんどの場合、@emph{最初}の呼び出しでは@var{repeat}の効果はなく、
@var{time}だけが時刻を指定する。
1つ例外があり、@var{time}が@code{t}であると、
時刻が@var{repeat}の整数倍であるとタイマを実行する。
これは@code{display-time}のような関数に有用である。

関数@code{run-at-time}は、予約した未来の特定の動作を
識別するタイマを返す。
この値は、@code{cancel-timer}（下記参照）の呼び出しに使える。
@end deffn

  A repeating timer nominally ought to run every @var{repeat} seconds,
but remember that any invocation of a timer can be late.  Lateness of
one repetition has no effect on the scheduled time of the next
repetition.  For instance, if Emacs is busy computing for long enough
to cover three scheduled repetitions of the timer, and then starts to
wait, it will immediately call the timer function three times in
immediate succession (presuming no other timers trigger before or
between them).  If you want a timer to run again no less than @var{n}
seconds after the last invocation, don't use the @var{repeat} argument.
Instead, the timer function should explicitly reschedule the timer.

@defopt timer-max-repeats
This variable's value specifies the maximum number of times to repeat
calling a timer function in a row, when many previously scheduled
calls were unavoidably delayed.
@end defopt

@defmac with-timeout (seconds timeout-forms@dots{}) body@dots{}
@var{body}を実行するが、@var{seconds}秒でその実行を諦める。
時間が切れるまえに@var{body}が終了すると
@code{with-timeout}は@var{body}の最後のフォームの値を返す。
しかし、時間が切れると@var{body}の実行を取り止め、
@code{with-timeout}は@var{timeout-forms}をすべて実行し、
それらの最後の値を返す。

このマクロは、@var{seconds}秒後に動作するタイマを設定することで動作する。
その時間内に@var{body}が終了すれば、タイマを取り消す。
タイマが実際に動作すると@var{body}の実行を終了させてから、
@var{timeout-forms}を実行する。

プログラムから待つことが可能な基本関数を呼び出したときにのみ、
タイマはLispプログラム内で実行可能なため、
@code{with-timeout}は@var{body}の計算途中では
その実行を停止できない。
それらが待つことが可能な基本関数の1つを呼び出したときにのみ停止できる。
したがって、長い計算を行わない入力を待つような@var{body}に
@code{with-timeout}を使う。
@end defmac

関数@code{y-or-n-p-with-timeout}は、
応答を長く待ちすぎないようにタイマを使った単純な例です。
@xref{Yes-or-No
Queries}。

@defun cancel-timer timer
タイマ@var{timer}（通常は以前に@code{run-at-time}や
@code{run-with-idle-timer}が返した値）の予約を取り消す。
これは、これらのいずれかの呼び出しの効果を取り消し、
その時刻になってもなにも特別なことは起こらない。
@end defun

@node Idle Timers
@section Idle Timers
@cindex idle timers

  Here is how to set up a timer that runs when Emacs is idle for a
certain length of time.  Aside from how to set them up, idle timers
work just like ordinary timers.

@deffn Command run-with-idle-timer secs repeat function &rest args
Emacsが@var{secs}秒間なにもしないときに実行するタイマを設定する。
@var{secs}の値は整数でも、@code{current-idle-time}で返される
タイプの浮動小数点数でもよい。

@var{repeat}が@code{nil}であると、
これ以降にはじめてEmacsが十分長い期間なにもしないでいると、
タイマを一度だけ実行する。
しばしば@var{repeat}は@code{nil}以外であり、
Emacsが@var{secs}秒なにもしないでいる@emph{たびに}
タイマを実行することを意味する。

関数@code{run-with-idle-timer}は、
@code{cancel-timer}の呼び出しに使えるタイマの値を返す（@pxref{Timers}）。
@end deffn

@cindex アイドル状態
Emacsがユーザー入力を待ち始めると@dfn{アイドル状態}になり、
なにか入力がくるまでアイドル状態のままです。
5秒間のアイドル状態で動作するタイマがあったとすると、
Emacsがアイドルになってから約5秒後にそのタイマが実行されます。
しかし@var{repeat}が真（@code{nil}以外）であったとしても、
そのタイマはEmacsがアイドル状態であり続ける限りは再実行されません。
アイドル状態の期間は単調に増加するので、再度5秒後には戻りません。

Emacsがアイドル状態のときにはさまざまなことを行います。
ガベッジコレクション、自動保存、サブプロセスからのデータの処理です。
しかし、アイドル状態中のこれらの動作はアイドルタイマに干渉しません。
アイドル状態の時間を0にしないからです。
600秒に設定されたアイドルタイマは、
最後のユーザーコマンドを終了してから10分後に実行されます。
たとえその10分間に、サブプロセスの出力を何千回も受け取ろうが、
ガベッジコレクションや自動保存を行ったとしてもです。

ユーザーが入力を与えると、その入力を実行中はEmacsは非アイドル状態です。
そして再度アイドル状態になり、
繰り返すように設定されたアイドルタイマを1つずつそれ以降に実行します。

  Do not write an idle timer function containing a loop which does a
certain amount of processing each time around, and exits when
@code{(input-pending-p)} is non-@code{nil}.  This approach seems very
natural but has two problems:

@itemize
@item
It blocks out all process output (since Emacs accepts process output
only while waiting).

@item
It blocks out any idle timers that ought to run during that time.
@end itemize

@noindent
Similarly, do not write an idle timer function that sets up another
idle timer (including the same idle timer) with @var{secs} argument
less than or equal to the current idleness time.  Such a timer will
run almost immediately, and continue running again and again, instead
of waiting for the next time Emacs becomes idle.  The correct approach
is to reschedule with an appropriate increment of the current value of
the idleness time, as described below.

@defun current-idle-time
If Emacs is idle, this function returns the length of time Emacs has
been idle, as a list of four integers: @code{(@var{sec-high}
@var{sec-low} @var{microsec} @var{picosec})}, using the same format as
@code{current-time} (@pxref{Time of Day}).

When Emacs is not idle, @code{current-idle-time} returns @code{nil}.
This is a convenient way to test whether Emacs is idle.
@end defun

  The main use of @code{current-idle-time} is when an idle timer
function wants to ``take a break'' for a while.  It can set up another
idle timer to call the same function again, after a few seconds more
idleness.  Here's an example:

@example
(defvar my-resume-timer nil
  "Timer for `my-timer-function' to reschedule itself, or nil.")

(defun my-timer-function ()
  ;; @r{If the user types a command while @code{my-resume-timer}}
  ;; @r{is active, the next time this function is called from}
  ;; @r{its main idle timer, deactivate @code{my-resume-timer}.}
  (when my-resume-timer
    (cancel-timer my-resume-timer))
  ...@var{do the work for a while}...
  (when @var{taking-a-break}
    (setq my-resume-timer
          (run-with-idle-timer
            ;; Compute an idle time @var{break-length}
            ;; more than the current value.
            (time-add (current-idle-time) @var{break-length})
            nil
            'my-timer-function))))
@end example

@node Terminal Input
@section 端末入力
@cindex 端末入力

本節では、端末入力を記録したり処理する関数や変数について述べます。
関連する関数については@ref{Display}を参照してください。

@menu
* Input Modes::         Options for how input is processed.
* Recording Input::     Saving histories of recent or all input events.
@end menu

@node Input Modes
@subsection 入力方式
@cindex 入力方式
@cindex 端末入力方式

@defun set-input-mode interrupt flow meta &optional quit-char
この関数は、キーボード入力を読み取るモードを設定する。
@var{interrupt}が@code{nil}以外であると、
Emacsは入力割り込みを用いる。
@code{nil}であると、@sc{cbreak}モードを用いる。
デフォルトの設定はシステムに依存する。
この指定に関わらずつねに@sc{cbreak}モードを用いるシステムもある。

EmacsがXと直接通信しているときは、
通信方法が割り込みであると承知していると
この引数を無視して割り込みを使う。

@var{flow}が@code{nil}以外であると、
Emacsは端末出力にフロー制御@sc{xon/xoff}（@kbd{C-q}、@kbd{C-s}）を用いる。
@sc{cbreak}モード以外ではこれの効果はない。

引数@var{meta}は、文字コードが127を越える入力文字の扱い方を制御する。
@var{meta}が@code{t}であると、8ビット目が立っている文字を
メタ文字に変換する。
@var{meta}が@code{nil}であると、8ビット目を無視する。
パリティビットを用いる端末では、これが必要である。
@var{meta}が@code{t}でも@code{nil}でもないと、
Emacsは入力した8ビットすべてを無変更で使う。
8ビット文字集合を使う端末には、これがよい。

@var{quit-char}が@code{nil}以外であると、
中断に使用する文字を指定する。
通常、この文字は@kbd{C-g}である。
@xref{Quitting}。
@end defun

関数@code{current-input-mode}は、Emacsが現在使用している
入力モードの設定を返します。

@defun current-input-mode
この関数は、キーボード入力を読み取るための現在のモードを返す。
@code{set-input-mode}の引数に対応する
@code{(@var{interrupt} @var{flow} @var{meta} @var{quit})}
の形のリストを返す。
各要素の意味はつぎのとおりである。
@table @var
@item interrupt
@code{nil}以外であると、Emacsは割り込み駆動の入力を用いている。
@code{nil}であると、Emacsは@sc{cbreak}モードを用いている。
@item flow
@code{nil}以外であると、
Emacsは端末出力にフロー制御@sc{xon/xoff}（@kbd{C-q}、@kbd{C-s}）
を用いている。
この値は、@var{interrupt}が@code{nil}の場合にのみ意味を持つ。
@item meta
Emacsが入力文字の8ビット目をメタビットとして扱うときには@code{t}である。
Emacsが各入力文字の8ビット目をつねに0にするときには@code{nil}である。
さもなければ、Emacsは文字コードとして8ビットすべてを使っている。
@item quit
現在Emacsが中断に使っている文字であり、普通は@kbd{C-g}である。
@end table
@end defun

@node Recording Input
@subsection 入力を記録する
@cindex 入力を記録する

@defun recent-keys
この関数は、キーボードやマウスからの最近の100個の入力イベントを収めた
ベクトルを返す。
キー列として使われたかどうかに関わらず、すべてのイベントを含む。
したがって、キーボードマクロで生成したイベントを数えずに
最後の100個のイベントをつねに得ることになる。
（キーボードマクロで生成したイベントを省くのは、
それらはデバッグにはあまり役立たないからである。
キーボードマクロを起動したイベントが見えれば十分なはずである。）

A call to @code{clear-this-command-keys} (@pxref{Command Loop Info})
causes this function to return an empty vector immediately afterward.
@end defun

@deffn Command open-dribble-file filename
@cindex ドリブルファイル
この関数は、@var{filename}という名前の@dfn{ドリブルファイル}
（dribble file）をオープンする。
ドリブルファイルをオープンしていると、
（キーボードマクロを除く）キーボードやマウスからの各入力イベントを
そのファイルに書き出す。
文字でないイベントは、その表示表現を@samp{<@dots{}>}で囲って表す。

ドリブルファイルをクローズするには、
引数に@code{nil}を指定してこの関数を呼び出す。
@end deffn

関数@code{open-termscript}（@pxref{Terminal Output}）も
参照してください。

@node Terminal Output
@section 端末出力
@cindex 端末出力

端末出力関数は、端末に出力を送ったり、
端末へ送った出力を記録します。
変数@code{baud-rate}は、Emacsが考えている端末の出力速度を表します。

@defopt baud-rate
この変数の値は、Emacsが関知する端末の出力速度である。
この変数に設定しても実際のデータ転送速度を変更しないが、
その値はパディングなどの計算に用いられる。

  It also affects decisions about whether to scroll part of the
screen or repaint on text terminals.  @xref{Forcing Redisplay},
for the corresponding functionality on graphical terminals.

値の単位はボー（baud）である。
@end defopt

ネットワーク経由で使い、
ネットワークの異なる部分が異なる速度で動いているときには、
Emacsが返す値はローカル端末で使っている場合の値と異なるかもしれません。
リモートマシンへの通信速度でローカル端末と通信する
ネットワークプロトコルもあり、
そのような場合、Emacsや他のプログラムは正しい値を得られます。
その他の場合では正しい値を得られません。
Emacsの値がまちがっているときには、
あまり最適でない決定をくだすでしょう。
この問題を修正するには、@code{baud-rate}に設定します。

@defun send-string-to-terminal string &optional terminal
この関数は、なにも変更せずに文字列@var{string}を端末@var{terminal}へ送る。
@var{string}内のコントロール文字は、端末に依存する効果を持つ。
This function operates only on text terminals.  @var{terminal} may be
a terminal object, a frame, or @code{nil} for the selected frame's
terminal.  In batch mode, @var{string} is sent to @code{stdout} when
@var{terminal} is @code{nil}.

この関数の1つの用途は、ファンクションキーの定義を
ダウンロード可能な端末のファンクションキーを定義することである。
たとえば、ファンクションキー4を（文字の列@kbd{C-u C-f}を
計算機に送って）4文字進めると定義にするには、
特定の端末ではつぎのようにする。

@example
@group
(send-string-to-terminal "\eF4\^U\^F")
     @result{} nil
@end group
@end example
@end defun

@deffn Command open-termscript filename
@cindex タームスクリプトファイル
この関数は、Emacsが端末へ送出するすべての文字を記録する
@dfn{タームスクリプトファイル}（termscript file）を
オープンするために使う。
関数は@code{nil}を返す。
タームスクリプトファイルは、
Emacsがスクリーンを乱してしまう問題、
誤ったtermcap定義やEmacsの実際のバグではない端末の望ましくない設定の
問題を調べるのに有用である。
どのような文字の列が実際に出力されるか確信できれば、
それらが使用中のTermcapのどの定義に対応するか調べられる。

@example
@group
(open-termscript "../junk/termscript")
     @result{} nil
@end group
@end example

You close the termscript file by calling this function with an
argument of @code{nil}.

@ref{Recording Input}の@code{open-dribble-file}も参照。
@end deffn

@node Sound Output
@section Sound Output
@cindex sound

  To play sound using Emacs, use the function @code{play-sound}.  Only
certain systems are supported; if you call @code{play-sound} on a
system which cannot really do the job, it gives an error.

@c FIXME: Add indexes for Au and WAV?  --xfq
  The sound must be stored as a file in RIFF-WAVE format (@samp{.wav})
or Sun Audio format (@samp{.au}).

@defun play-sound sound
This function plays a specified sound.  The argument, @var{sound}, has
the form @code{(sound @var{properties}...)}, where the @var{properties}
consist of alternating keywords (particular symbols recognized
specially) and values corresponding to them.

Here is a table of the keywords that are currently meaningful in
@var{sound}, and their meanings:

@table @code
@item :file @var{file}
This specifies the file containing the sound to play.
If the file name is not absolute, it is expanded against
the directory @code{data-directory}.

@item :data @var{data}
This specifies the sound to play without need to refer to a file.  The
value, @var{data}, should be a string containing the same bytes as a
sound file.  We recommend using a unibyte string.

@item :volume @var{volume}
This specifies how loud to play the sound.  It should be a number in the
range of 0 to 1.  The default is to use whatever volume has been
specified before.

@item :device @var{device}
This specifies the system device on which to play the sound, as a
string.  The default device is system-dependent.
@end table

Before actually playing the sound, @code{play-sound}
calls the functions in the list @code{play-sound-functions}.
Each function is called with one argument, @var{sound}.
@end defun

@deffn Command play-sound-file file &optional volume device
This function is an alternative interface to playing a sound @var{file}
specifying an optional @var{volume} and @var{device}.
@end deffn

@defvar play-sound-functions
A list of functions to be called before playing a sound.  Each function
is called with one argument, a property list that describes the sound.
@end defvar

@node X11 Keysyms
@section システム固有のX11のキーシンボル
@cindex X11 keysyms

システム固有のX11のキーシンボル（keysym）を定義するには、
変数@code{system-key-alist}に設定します。

@defvar system-key-alist
この変数の値は、各要素がシステム固有の
各キーシンボルに対応する連想リストであること。
各要素は@code{(@var{code} . @var{symbol})}の形である。
ここで、@var{code}は（『提供業者固有の』ビット
@ifnottex
@minus{}2**28）を
@end ifnottex
@tex
$-2^{28}$）を
@end tex
含まない）数値のキーシンボルコードであり、
@var{symbol}はファンクションキーの名前である。

たとえば、@code{(168 . mute-acute)}は、
数値コードが
@ifnottex
@minus{}2**28
@end ifnottex
@tex
$-2^{28}$
@end tex
+ 168 であるHP Xサーバーが使うシステム固有キーを定義する。

It is not crucial to exclude from the alist the keysyms of other X
servers; those do no harm, as long as they don't conflict with the ones
used by the X server actually in use.

変数は現在の端末につねにローカルであり、
バッファローカルにはなりえない。
@xref{Multiple Terminals}。
@end defvar

You can specify which keysyms Emacs should use for the Meta, Alt, Hyper, and Super modifiers by setting these variables:

@defvar x-alt-keysym
@defvarx x-meta-keysym
@defvarx x-hyper-keysym
@defvarx x-super-keysym
The name of the keysym that should stand for the Alt modifier
(respectively, for Meta, Hyper, and Super).  For example, here is
how to swap the Meta and Alt modifiers within Emacs:
@lisp
(setq x-alt-keysym 'meta)
(setq x-meta-keysym 'alt)
@end lisp
@end defvar

@node Batch Mode
@section バッチモード
@cindex バッチモード

コマンド行オプション@samp{-batch}は、Emacsを非対話的に実行させる。このモー
ドでは、Emacsは端末からコマンドを読まず、端末のモードを変更せず、スクリー
ンに出力もしない。これは、実行するLispプログラムを指定できるようにする
ためであり、それが終るとEmacsも終了する。実行すべきプログラムは、
@var{file}という名前のライブラリをロードする@samp{-l @var{file}}、および、
引数なしで関数@var{function}を呼び出す@samp{-f @var{function}}で指定するか、
または@samp{--eval @var{form}}で指定する。

バッチモードでは、ストリームとして@code{t}を指定した@code{message}や
@code{prin1}など、本来はエコー領域に表示されるLispプログラムの出力は、
Emacsの標準エラー記述子へ出力される。
すなわち、Emacsは非対話的なアプリケーションプログラムのように振る舞う。
（コマンドの表示などのEmacs自身がエコー領域に出力するものは完全に抑制される。）

@defvar noninteractive
この変数は、Emacsがバッチモードで動作していると@code{nil}以外である。
@end defvar

@node Session Management
@section Session Management
@cindex session manager

Emacs supports the X Session Management Protocol, which is used to
suspend and restart applications.  In the X Window System, a program
called the @dfn{session manager} is responsible for keeping track of
the applications that are running.  When the X server shuts down, the
session manager asks applications to save their state, and delays the
actual shutdown until they respond.  An application can also cancel
the shutdown.

When the session manager restarts a suspended session, it directs
these applications to individually reload their saved state.  It does
this by specifying a special command-line argument that says what
saved session to restore.  For Emacs, this argument is @samp{--smid
@var{session}}.

@defvar emacs-save-session-functions
@cindex session file
Emacs supports saving state via a hook called
@code{emacs-save-session-functions}.  Emacs runs this hook when the
session manager tells it that the window system is shutting down.  The
functions are called with no arguments, and with the current buffer
set to a temporary buffer.  Each function can use @code{insert} to add
Lisp code to this buffer.  At the end, Emacs saves the buffer in a
file, called the @dfn{session file}.

@findex emacs-session-restore
Subsequently, when the session manager restarts Emacs, it loads the
session file automatically (@pxref{Loading}).  This is performed by a
function named @code{emacs-session-restore}, which is called during
startup.  @xref{Startup Summary}.

If a function in @code{emacs-save-session-functions} returns
non-@code{nil}, Emacs tells the session manager to cancel the
shutdown.
@end defvar

Here is an example that just inserts some text into @file{*scratch*} when
Emacs is restarted by the session manager.

@example
@group
(add-hook 'emacs-save-session-functions 'save-yourself-test)
@end group

@group
(defun save-yourself-test ()
  (insert "(save-current-buffer
  (switch-to-buffer \"*scratch*\")
  (insert \"I am restored\"))")
  nil)
@end group
@end example

@node Desktop Notifications
@section Desktop Notifications
@cindex desktop notifications
@cindex notifications, on desktop

Emacs is able to send @dfn{notifications} on systems that support the
freedesktop.org Desktop Notifications Specification.  In order to use
this functionality, Emacs must have been compiled with D-Bus support,
and the @code{notifications} library must be loaded.  @xref{Top, ,
D-Bus,dbus,D-Bus integration in Emacs}.

@defun notifications-notify &rest params
This function sends a notification to the desktop via D-Bus,
consisting of the parameters specified by the @var{params} arguments.
These arguments should consist of alternating keyword and value pairs.
The supported keywords and values are as follows:

@table @code
@item :bus @var{bus}
The D-Bus bus.  This argument is needed only if a bus other than
@code{:session} shall be used.

@item :title @var{title}
The notification title.

@item :body @var{text}
The notification body text.  Depending on the implementation of the
notification server, the text could contain HTML markups, like
@samp{"<b>bold text</b>"}, hyperlinks, or images.  Special HTML
characters must be encoded, as @samp{"Contact
&lt;postmaster@@localhost&gt;!"}.

@item :app-name @var{name}
The name of the application sending the notification.  The default is
@code{notifications-application-name}.

@item :replaces-id @var{id}
The notification @var{id} that this notification replaces.  @var{id}
must be the result of a previous @code{notifications-notify} call.

@item :app-icon @var{icon-file}
The file name of the notification icon.  If set to @code{nil}, no icon
is displayed.  The default is @code{notifications-application-icon}.

@item :actions (@var{key} @var{title} @var{key} @var{title} ...)
A list of actions to be applied.  @var{key} and @var{title} are both
strings.  The default action (usually invoked by clicking the
notification) should have a key named @samp{"default"}.  The title can
be anything, though implementations are free not to display it.

@item :timeout @var{timeout}
The timeout time in milliseconds since the display of the notification
at which the notification should automatically close.  If @minus{}1, the
notification's expiration time is dependent on the notification
server's settings, and may vary for the type of notification.  If 0,
the notification never expires.  Default value is @minus{}1.

@item :urgency @var{urgency}
The urgency level.  It can be @code{low}, @code{normal}, or @code{critical}.

@item :action-items
When this keyword is given, the @var{title} string of the actions is
interpreted as icon name.

@item :category @var{category}
The type of notification this is, a string.  See the
@uref{http://developer.gnome.org/notification-spec/#categories,
Desktop Notifications Specification} for a list of standard
categories.

@item :desktop-entry @var{filename}
This specifies the name of the desktop filename representing the
calling program, like @samp{"emacs"}.

@item :image-data (@var{width} @var{height} @var{rowstride} @var{has-alpha} @var{bits} @var{channels} @var{data})
This is a raw data image format that describes the width, height,
rowstride, whether there is an alpha channel, bits per sample,
channels and image data, respectively.

@item :image-path @var{path}
This is represented either as a URI (@samp{file://} is the only URI
schema supported right now) or a name in a freedesktop.org-compliant
icon theme from @samp{$XDG_DATA_DIRS/icons}.

@item :sound-file @var{filename}
The path to a sound file to play when the notification pops up.

@item :sound-name @var{name}
A themable named sound from the freedesktop.org sound naming
specification from @samp{$XDG_DATA_DIRS/sounds}, to play when the
notification pops up.  Similar to the icon name, only for sounds.  An
example would be @samp{"message-new-instant"}.

@item :suppress-sound
Causes the server to suppress playing any sounds, if it has that
ability.

@item :resident
When set the server will not automatically remove the notification
when an action has been invoked.  The notification will remain resident
in the server until it is explicitly removed by the user or by the
sender.  This hint is likely only useful when the server has the
@code{:persistence} capability.

@item :transient
When set the server will treat the notification as transient and
by-pass the server's persistence capability, if it should exist.

@item :x @var{position}
@itemx :y @var{position}
Specifies the X, Y location on the screen that the
notification should point to.  Both arguments must be used together.

@item :on-action @var{function}
Function to call when an action is invoked.  The notification @var{id}
and the @var{key} of the action are passed as arguments to the
function.

@item :on-close @var{function}
Function to call when the notification has been closed by timeout or
by the user.  The function receive the notification @var{id} and the closing
@var{reason} as arguments:

@itemize
@item @code{expired} if the notification has expired
@item @code{dismissed} if the notification was dismissed by the user
@item @code{close-notification} if the notification was closed by a call to
@code{notifications-close-notification}
@item @code{undefined} if the notification server hasn't provided a reason
@end itemize
@end table

Which parameters are accepted by the notification server can be
checked via @code{notifications-get-capabilities}.

This function returns a notification id, an integer, which can be used
to manipulate the notification item with
@code{notifications-close-notification} or the @code{:replaces-id}
argument of another @code{notifications-notify} call.  For example:

@example
@group
(defun my-on-action-function (id key)
  (message "Message %d, key \"%s\" pressed" id key))
     @result{} my-on-action-function
@end group

@group
(defun my-on-close-function (id reason)
  (message "Message %d, closed due to \"%s\"" id reason))
     @result{} my-on-close-function
@end group

@group
(notifications-notify
 :title "Title"
 :body "This is <b>important</b>."
 :actions '("Confirm" "I agree" "Refuse" "I disagree")
 :on-action 'my-on-action-function
 :on-close 'my-on-close-function)
     @result{} 22
@end group

@group
A message window opens on the desktop.  Press "I agree"
     @result{} Message 22, key "Confirm" pressed
        Message 22, closed due to "dismissed"
@end group
@end example
@end defun

@defun notifications-close-notification id &optional bus
This function closes a notification with identifier @var{id}.
@var{bus} can be a string denoting a D-Bus connection, the default is
@code{:session}.
@end defun

@defun notifications-get-capabilities &optional bus
Returns the capabilities of the notification server, a list of
symbols.  @var{bus} can be a string denoting a D-Bus connection, the
default is @code{:session}.  The following capabilities can be
expected:

@table @code
@item :actions
The server will provide the specified actions to the user.

@item :body
Supports body text.

@item :body-hyperlinks
The server supports hyperlinks in the notifications.

@item :body-images
The server supports images in the notifications.

@item :body-markup
Supports markup in the body text.

@item :icon-multi
The server will render an animation of all the frames in a given image
array.

@item :icon-static
Supports display of exactly 1 frame of any given image array.  This
value is mutually exclusive with @code{:icon-multi}.

@item :persistence
The server supports persistence of notifications.

@item :sound
The server supports sounds on notifications.
@end table

Further vendor-specific caps start with @code{:x-vendor}, like
@code{:x-gnome-foo-cap}.
@end defun

@defun notifications-get-server-information &optional bus
Return information on the notification server, a list of strings.
@var{bus} can be a string denoting a D-Bus connection, the default is
@code{:session}.  The returned list is @code{(@var{name} @var{vendor}
@var{version} @var{spec-version})}.

@table @var
@item name
The product name of the server.

@item vendor
The vendor name.  For example, @samp{"KDE"}, @samp{"GNOME"}.

@item version
The server's version number.

@item spec-version
The specification version the server is compliant with.
@end table

If @var{spec_version} is @code{nil}, the server supports a
specification prior to @samp{"1.0"}.
@end defun

@node File Notifications
@section Notifications on File Changes
@cindex file notifications
@cindex watch, for filesystem events

Several operating systems support watching of filesystems for changes
of files.  If configured properly, Emacs links a respective library
like @file{gfilenotify}, @file{inotify}, or  @file{w32notify}
statically.  These libraries enable watching of filesystems on the
local machine.

It is also possible to watch filesystems on remote machines,
@pxref{Remote Files,, Remote Files, emacs, The GNU Emacs Manual}
This does not depend on one of the libraries linked to Emacs.

Since all these libraries emit different events on notified file
changes, there is the Emacs library @code{filenotify} which provides a
unique interface.

@defun file-notify-add-watch file flags callback
Add a watch for filesystem events pertaining to @var{file}.  This
arranges for filesystem events pertaining to @var{file} to be reported
to Emacs.

The returned value is a descriptor for the added watch.  Its type
depends on the underlying library, it cannot be assumed to be an
integer as in the example below.  It should be used for comparison by
@code{equal} only.

If the @var{file} cannot be watched for some reason, this function
signals a @code{file-notify-error} error.

Sometimes, mounted filesystems cannot be watched for file changes.
This is not detected by this function, a non-@code{nil} return value
does not guarantee that changes on @var{file} will be notified.

@var{flags} is a list of conditions to set what will be watched for.
It can include the following symbols:

@table @code
@item change
watch for file changes
@item attribute-change
watch for file attribute changes, like permissions or modification
time
@end table

If @var{file} is a directory, changes for all files in that directory
will be notified.  This does not work recursively.

When any event happens, Emacs will call the @var{callback} function
passing it a single argument @var{event}, which is of the form

@lisp
(@var{descriptor} @var{action} @var{file} [@var{file1}])
@end lisp

@var{descriptor} is the same object as the one returned by this
function.  @var{action} is the description of the event.  It could be
any one of the following symbols:

@table @code
@item created
@var{file} was created
@item deleted
@var{file} was deleted
@item changed
@var{file} has changed
@item renamed
@var{file} has been renamed to @var{file1}
@item attribute-changed
a @var{file} attribute was changed
@end table

@var{file} and @var{file1} are the name of the file(s) whose event is
being reported.  For example:

@example
@group
(require 'filenotify)
     @result{} filenotify
@end group

@group
(defun my-notify-callback (event)
  (message "Event %S" event))
     @result{} my-notify-callback
@end group

@group
(file-notify-add-watch
  "/tmp" '(change attribute-change) 'my-notify-callback)
     @result{} 35025468
@end group

@group
(write-region "foo" nil "/tmp/foo")
     @result{} Event (35025468 created "/tmp/.#foo")
        Event (35025468 created "/tmp/foo")
        Event (35025468 changed "/tmp/foo")
        Event (35025468 deleted "/tmp/.#foo")
@end group

@group
(write-region "bla" nil "/tmp/foo")
     @result{} Event (35025468 created "/tmp/.#foo")
        Event (35025468 changed "/tmp/foo") [2 times]
        Event (35025468 deleted "/tmp/.#foo")
@end group

@group
(set-file-modes "/tmp/foo" (default-file-modes))
     @result{} Event (35025468 attribute-changed "/tmp/foo")
@end group
@end example

Whether the action @code{renamed} is returned, depends on the used
watch library.  It can be expected, when a directory is watched, and
both @var{file} and @var{file1} belong to this directory.  Otherwise,
the actions @code{deleted} and @code{created} could be returned in a
random order.

@example
@group
(rename-file "/tmp/foo" "/tmp/bla")
     @result{} Event (35025468 renamed "/tmp/foo" "/tmp/bla")
@end group

@group
(file-notify-add-watch
  "/var/tmp" '(change attribute-change) 'my-notify-callback)
     @result{} 35025504
@end group

@group
(rename-file "/tmp/bla" "/var/tmp/bla")
     @result{} ;; gfilenotify
        Event (35025468 renamed "/tmp/bla" "/var/tmp/bla")

     @result{} ;; inotify
        Event (35025504 created "/var/tmp/bla")
        Event (35025468 deleted "/tmp/bla")
@end group
@end example
@end defun

@defun file-notify-rm-watch descriptor
Removes an existing file watch specified by its @var{descriptor}.
@var{descriptor} should be an object returned by
@code{file-notify-add-watch}.
@end defun

@node Dynamic Libraries
@section Dynamically Loaded Libraries
@cindex dynamic libraries

  A @dfn{dynamically loaded library} is a library that is loaded on
demand, when its facilities are first needed.  Emacs supports such
on-demand loading of support libraries for some of its features.

@defvar dynamic-library-alist
This is an alist of dynamic libraries and external library files
implementing them.

Each element is a list of the form
@w{@code{(@var{library} @var{files}@dots{})}}, where the @code{car} is
a symbol representing a supported external library, and the rest are
strings giving alternate filenames for that library.

Emacs tries to load the library from the files in the order they
appear in the list; if none is found, the Emacs session won't have
access to that library, and the features it provides will be
unavailable.

Image support on some platforms uses this facility.  Here's an example
of setting this variable for supporting images on MS-Windows:

@example
(setq dynamic-library-alist
      '((xpm "libxpm.dll" "xpm4.dll" "libXpm-nox4.dll")
        (png "libpng12d.dll" "libpng12.dll" "libpng.dll"
             "libpng13d.dll" "libpng13.dll")
        (jpeg "jpeg62.dll" "libjpeg.dll" "jpeg-62.dll"
              "jpeg.dll")
        (tiff "libtiff3.dll" "libtiff.dll")
        (gif "giflib4.dll" "libungif4.dll" "libungif.dll")
        (svg "librsvg-2-2.dll")
        (gdk-pixbuf "libgdk_pixbuf-2.0-0.dll")
        (glib "libglib-2.0-0.dll")
	(gobject "libgobject-2.0-0.dll")))
@end example

Note that image types @code{pbm} and @code{xbm} do not need entries in
this variable because they do not depend on external libraries and are
always available in Emacs.

Also note that this variable is not meant to be a generic facility for
accessing external libraries; only those already known by Emacs can
be loaded through it.

This variable is ignored if the given @var{library} is statically
linked into Emacs.
@end defvar
