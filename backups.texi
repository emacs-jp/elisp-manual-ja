@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1999, 2001-2015 Free Software Foundation,
@c Inc.
@c See the file elisp.texi for copying conditions.
@node Backups and Auto-Saving
@chapter バックアップと自動保存
@cindex backups and auto-saving

バックアップファイルと自動保存ファイルは、クラッシュやユーザー自身の誤り
からEmacsがユーザーを保護するための2つの方式です。自動保存により、現在の
編集セッションにおいて、まえの時点でのテキストを確保します。バックアップ
ファイルにより、現在のセッション以前のファイル内容を確保します。

@menu
* Backup Files::   How backup files are made; how their names are chosen.
* Auto-Saving::    How auto-save files are made; how their names are chosen.
* Reverting::      @code{revert-buffer}, and how to customize what it does.
@end menu

@node Backup Files
@section バックアップファイル
@cindex バックアップファイル

@dfn{バックアップファイル}（backup file）とは、読者が編集中のファイルの古
い内容のコピーです。バッファを訪問しているファイルに初めて保存するときに、
Emacsはバックアップファイルを作成します。通常これは、バックアップファイル
は現在の編集セッションよりまえのファイルの内容を保持することを意味します。
バックアップファイルの内容は、通常、それが作られると変更されません。

訪問したファイルを新たな名前に改名することで通常バックアップは作られます。
訪問したファイルをコピーしてバックアップファイルを作るように指示すること
もできます。どちらを選ぶかによって、複数の名前を持つファイルでは違いがで
ます。また、編集したファイルの所有者が元所有者と同じであるか、それとも編
集したユーザーが所有者になるかにも影響します。

デフォルトでは、Emacsは各編集ファイルに1つのバックアップファイルを作りま
す。番号付きのバックアップファイルを作るように指示することもでき、そうす
ると、新たなバックアップファイルごとに新たな名前が付きます。古い番号付き
バックアップファイルは必要なくなれば削除できますし、Emacsがそれらを自動的
に削除することも可能です。

@menu
* Making Backups::     How Emacs makes backup files, and when.
* Rename or Copy::     Two alternatives: renaming the old file or copying it.
* Numbered Backups::   Keeping multiple backups for each source file.
* Backup Names::       How backup file names are computed; customization.
@end menu

@node Making Backups
@subsection バックアップファイルの作成
@cindex バックアップファイルの作成

@defun backup-buffer
この関数は、必要ならば、カレントバッファで訪問しているファイルのバックアッ
プを作成する。バッファを初めて保存するまえに@code{save-buffer}がこの関数
を呼び出す。

If a backup was made by renaming, the return value is a cons cell of
the form (@var{modes} @var{extra-alist} @var{backupname}), where
@var{modes} are the mode bits of the original file, as returned by
@code{file-modes} (@pxref{Testing Accessibility}), @var{extra-alist}
is an alist describing the original file's extended attributes, as
returned by @code{file-extended-attributes} (@pxref{Extended
Attributes}), and @var{backupname} is the name of the backup.

In all other cases (i.e., if a backup was made by copying or if no
backup was made), this function returns @code{nil}.
@end defun

@defvar buffer-backed-up
このバッファローカルな変数は、当該バッファのもとで当該バッファのファイル
のバックアップを作成済みかどうかを表す。@code{nil}以外であれば、バックアッ
プファイルは作成済みであることを表す。さもなければ、（バックアップがオン
になっていれば）つぎに保存するときにファイルのバックアップを作成するべき
であることを表す。これは恒久的にバッファローカルであり、
@code{kill-all-local-variables}によって変更されない。
@end defvar

@defopt make-backup-files
この変数は、バックアップファイルを作成するかどうかを決定する。
@code{nil}以外であると、@code{backup-inhibited}が@code{nil}ならば（下記参照）
Emacsは初めて保存するときに各ファイルのバックアップを作成する。

つぎの例は、rmailのバッファでのみ変数@code{make-backup-files}を
変更する方法である。
この変数を@code{nil}にすると、
Emacsはそれらのファイルのバックアップを作成しなくなり、
ディスクスペースの節約になる。
（このコードを読者の設定ファイルに入れてもよい。）

@smallexample
@group
(add-hook 'rmail-mode-hook 
          (function (lambda ()
                      (make-local-variable 
                       'make-backup-files)
                      (setq make-backup-files nil))))
@end group
@end smallexample
@end defopt

@defvar backup-enable-predicate
この変数の値は、ファイルをバックアップすべきかどうかを決定する
ために特定の場面で呼び出される関数である。
当該関数は、調べるべきファイルの名前を引数にとる。
当該関数が@code{nil}を返すと、当該ファイルのバックアップは禁止である。
さもなければ、本節の他の変数が、
バックアップするかどうかやバックアップ方法を指定する。

@findex normal-backup-enable-predicate
この変数のデフォルト値は@code{normal-backup-enable-predicate}であり、
@code{temporary-file-directory} や
@code{small-temporary-file-directory} にあるファイルを確認し、バックアッ
プを行う。
@end defvar

@defvar backup-inhibited
この変数が@code{nil}以外であると、バックアップを禁止する。
この変数は、訪問したファイルの名前に対する@code{backup-enable-predicate}の
検査結果を記録している。
訪問したファイルに基づいてバックアップを禁止する
他の機構でもこの変数を使える。
たとえば、VCはこの変数に@code{nil}以外を設定し、
版管理システムで管理されているファイルに対してバックアップの作成を禁止する。

これは恒久的にバッファローカルであり、
メジャーモードを変更しても値は失われない。
メジャーモードはこの変数に設定するべきではなく、
かわりに、@code{make-backup-files}に設定するべきである。
@end defvar

@defopt backup-directory-alist
@tindex backup-directory-alist
これはファイル名の正規表現とバックアップディレクトリの連想リストである。
それぞれの要素は以下のようになる。
@smallexample
(@var{regexp} . @var{directory})
@end smallexample

@noindent
@var{regexp}に一致した名前を持つファイルのバックアップは
@var{directory}に保存される。@var{directory}が相対パスか絶対パスである。
絶対パスであれば、一致したファイルのバックアップはすべて同じディレクトリにできる。
そして、そのバックアップファイルの名前は
衝突を防ぐために、ディレクトリの区切り文字を@samp{!}に変えたフルパスに
なる。この方法はファイルシステムがファイル名を短縮して与える場合にはう
まく動作しないだろう。

すべてのバックアップが1つのディレクトリにできるようにするには、
@samp{"."}と適切なディレクトリのペアを持つ連想リストであればよい。

この変数が@code{nil}かファイル名に一致しなかった場合には、バックアップ
ファイルは元ファイルと同じディレクトリにできる。

この変数は、MS-DOSのように長いファイル名に対応していないシステムでは無
視される。
@end defopt

@defopt make-backup-file-name-function
この変数の値は、バックアップファイル名を作る関数である。
@code{make-backup-file-name}が呼び出す。
@xref{Backup Names,, Naming Backup Files}。

ある種のファイルでは特別な処理ができるように、この変数はバッファローカ
ルになっている。もしこれを設定した場合には、@code{backup-file-name-p}
や @code{file-name-sans-versions} の変更も必要となる場合がある。
@end defopt


@node Rename or Copy
@subsection 改名によるバックアップかコピーによるバックアップか
@cindex バックアップファイルの作成方法

Emacsは2つの方法でバックアップファイルを作れます。

@itemize @bullet
@item
Emacsは、元ファイルを改名してバックアップファイルとしてから、
保存すべきバッファを新たなファイルに書き出す。
この処理のあとでは、元ファイルの他の名前（つまりハードリンク）は
バックアップファイルを指す。
新たなファイルの所有者は編集しているユーザーになり、そのグループは
当該ディレクトリでユーザーが新規にファイルを書いた場合のデフォルトである。

@item
Emacsは元ファイルをバックアップファイルにコピーしてから、
元ファイルを新たな内容で上書きする。
この処理のあとでは、元ファイルの他の名前（つまりハードリンク）は
ファイルの（更新した）現在の版を指し続ける。
ファイルの所有者とグループは変わらない。
@end itemize

最初の改名による方式がデフォルトです。

変数@code{backup-by-copying}が@code{nil}以外であると、
2番目の方式、つまり、元ファイルをコピーしてから
バッファの新たな内容で上書きすることを指示します。
変数@code{file-precious-flag}が@code{nil}以外であっても
（その主目的の副作用として）同じ効果があります。
@xref{Saving Buffers}。

@defopt backup-by-copying
この変数が@code{nil}でなければ、
Emacsはつねにコピーしてバックアップファイルを作る。
デフォルトは@code{nil}である。
@end defopt

つぎの2つの変数が@code{nil}以外であると、
特定の場面では2番目の方式を使うことになります。
これらの変数は、特別な場面に該当しないファイルの扱い方には影響しません。

@defopt backup-by-copying-when-linked
この変数が@code{nil}以外の場合、Emacsは、
複数の名前（ハードリンク）を持つファイルはコピーしてバックアップする。
デフォルトは@code{nil}である。

この変数は@code{backup-by-copying}が@code{nil}以外の場合にのみ意味を持つ。
というのは、その変数が@code{nil}以外の場合にコピーを用いるからである。
@end defopt

@defopt backup-by-copying-when-mismatch
この変数が@code{nil}以外の場合、Emacsは、
改名するとファイルの所有者やグループを変更してしまう場合に
コピーしてバックアップする。

改名してもファイルの所有者やグループを変更しなければ、
この値は効果を持たない。
つまり、ユーザーが所有しているファイルであり、
そのグループが当該ユーザーが新規作成するファイルのデフォルトに一致する
場合である。

この変数は@code{backup-by-copying}が@code{nil}以外の場合にのみ意味を持つ。
というのは、その変数が@code{nil}以外の場合にコピーを用いるからである。
@end defopt

@defopt backup-by-copying-when-privileged-mismatch
この変数が@code{nil}でなければ、
@code{backup-by-copying-when-mismatch} と同じ動作になる。ただし、ある
ユーザIDの値、すなわちある数以下のIDの場合に限られる。この変数には数整
数を指定する。

そうして、@code{backup-by-copying-when-privileged-mismatch} に0を設定
すると、コピーによるバックアップはスーパーユーザで、ファイルの所有者の
変更を破棄する必要がある時にのみ、コピーによるバックアップが行われる。

デフォルトは200である。
@end defopt

@node Numbered Backups
@subsection 番号付きバックアップファイルの作成と削除 @emph{(2003/10/30)}
@cindex numbered backups

ファイル名が@file{foo}であると、
その番号付きバックアップファイルの名前は@var{v}を整数として
@file{foo.~@var{v}~}となります。
つまり、@file{foo.~1~}、@file{foo.~2~}、@file{foo.~3~}、@dots{}、
@file{foo.~259~}といった具合です。

@defopt version-control
この変数は、番号なしの1つのバックアップファイルを作るのか
複数の番号付きバックアップファイルを作るのかを制御する。

@table @asis
@item @code{nil}
訪問したファイルにすでに番号付きバックアップファイルがあれば
番号付きバックアップを作る。
さもなければ作らない。

@item @code{never}
番号付きバックアップは作らない。

@item @var{その他}
番号付きバックアップを作る。
@end table
@end defopt

番号付きバックアップファイルを使うと、
最終的には非常に多くのバックアップファイルができてしまい、
それらは削除しなければなりません。
Emacsはそれらを自動的に削除したり、
削除するかどうかユーザーに問い合わせることができます。

@defopt kept-new-versions
この変数の値は、新たに番号付きバックアップを作成したときに
保存すべき最新のバックアップの個数である。
新たに作成したバックアップも数える。
デフォルト値は2である。
@end defopt

@defopt kept-old-versions
この変数の値は、新たに番号付きバックアップを作成したときに
保存すべき最古のバックアップの個数である。
デフォルト値は2である。
@end defopt

1、2、3、5、7と番号が付いたバックアップがあり、
これらのどちらの変数の値も2であるとすると、
最古のものとして1と2の番号が付いたバックアップを保存し、
最新のものとして5と7の番号が付いたバックアップを保存する。
関数@code{find-backup-file-name}（@pxref{Backup Names}）は、
どの番号のバックアップを削除すべきかを決定する責任があるが、
それ自身はそれらを削除しない。

@defopt delete-old-versions
この変数が@code{t}であると、
ファイルを保存すると黙って範囲外のバックアップを削除する。@code{nil}
であれば、それを削除するかどうかユーザーに問い合わせる。さもなければ、
すべて削除されない。
@end defopt

@defopt dired-kept-versions
この変数は、diredのコマンド@kbd{.}（@code{dired-clean-directory}）で
最新のバックアップを何個保存するかを指定する。
これは、新たなバックアップファイルの作成を指示したときに
@code{kept-new-versions}が指定することと同じである。
デフォルト値は2である。
@end defopt

@node Backup Names
@subsection バックアップファイルの命名方法 @emph{(2003/10/30)}
@cindex naming backup files

本節の関数は、それらを再定義することでバックアップファイルの命名方法を
カスタマイズできるため、ここで述べることにします。
どれか1つを変更すると、残りのものも変更する必要があるでしょう。

@defun backup-file-name-p filename
この関数は、@var{filename}がバックアップファイルの名前である
可能性があると@code{nil}以外の値を返す。
@var{filename}という名前のファイルが存在する必要はなく、
この関数は単に名前だけを検査する。

@smallexample
@group
(backup-file-name-p "foo")
     @result{} nil
@end group
@group
(backup-file-name-p "foo~")
     @result{} 3
@end group
@end smallexample

この関数の標準定義はつぎのとおりである。

@smallexample
@group
(defun backup-file-name-p (file)
  "Return non-nil if FILE is a backup file \
name (numeric or not)..."
  (string-match "~\\'" file))
@end group
@end smallexample

@noindent
したがって、ファイル名が@samp{~}で終っていると、
この関数は@code{nil}以外の値を返す。
（説明文字列を2行に分けるためにバックスラッシュを使っているが、
文字列としては1行になる。）

カスタマイズのために再定義しやすいように、
この単純な式を独立した関数にしてある。
@end defun

@defun make-backup-file-name filename
この関数は、ファイル@var{filename}に対する
番号なしバックアップファイルに使う名前を表す文字列を返す。
UNIXでは、単に@var{filename}の末尾にティルダを付加したものである。

ほとんどのオペレーティングシステムでは、
この関数の標準定義はつぎのとおりである。

@smallexample
@group
(defun make-backup-file-name (file)
  "Create the non-numeric backup file name for FILE..."
  (concat file "~"))
@end group
@end smallexample

この関数を再定義すれば、バックアップファイルの命名方法を変更できる。
つぎの例では、ティルダに加えて先頭に@samp{.}を付けるように
@code{make-backup-file-name}を再定義する。

@smallexample
@group
(defun make-backup-file-name (filename)
  (expand-file-name
    (concat "." (file-name-nondirectory filename) "~")
    (file-name-directory filename)))
@end group

@group
(make-backup-file-name "backups.texi")
     @result{} ".backups.texi~"
@end group
@end smallexample

diredコマンドを含めてEmacsには、
バックアップファイルは@samp{~}で終ると仮定しているものがある。
この慣習に従わない場合、重大な問題には至らないであろうが、
それらのコマンドがあまり望ましくない結果をもたらすかもしれない。
@end defun

@defun find-backup-file-name filename
この関数は、@var{filename}に対する新たなバックアップファイルの
ファイル名を計算する。
さらに、削除すべき既存のバックアップファイルも提案する。
@code{find-backup-file-name}は、
@sc{car}に新たなバックアップファイルの名前、
@sc{cdr}に削除すべきバックアップファイルのリストを持つリストを返す。
この値が@code{nil}ならば、バックアップを作成しない。

2つの変数、@code{kept-old-versions}と@code{kept-new-versions}は、
どのバックアップを保存すべきかを決定する。
この関数は、値の@sc{cdr}ではそれらのバックアップファイルは
除外してある。
@xref{Numbered Backups}。

つぎの例の値では、@file{~rms/foo.~5~}が
新たなバックアップファイルの名前であり、
@file{~rms/foo.~3~}が『範囲外』のものであり、
呼び出し側で削除するかどうか考慮すべきである。

@smallexample
@group
(find-backup-file-name "~rms/foo")
     @result{} ("~rms/foo.~5~" "~rms/foo.~3~")
@end group
@end smallexample
@end defun

@c Emacs 19 feature
@defun file-newest-backup filename
この関数は、@var{filename}の最新のバックアップファイルの名前を返す。
当該ファイルにバックアップファイルがなければ@code{nil}を返す。

ファイルを比較するコマンドのなかには、
最新のバックアップファイルと自動的に比較できるように
この関数を使うものがある。
@end defun

@node Auto-Saving
@section 自動保存 @emph{(2003/10/30)}
@c @cindex 自動保存

Emacsは編集中のすべてのファイルを定期的に保存します。
これを@dfn{自動保存}（auto-savign）と呼びます。
自動保存により、システムがクラッシュしても、
一定量以上の作業を失わないようにします。
デフォルトでは、300打鍵ごと、あるいは、30秒間なにもしないと自動保存します。
ユーザー向けの自動保存に関する情報については、
@xref{Auto Save,, 自動保存、不慮の事故に対する備え, emacs,
GNU Emacs マニュアル}。
ここでは、自動保存を実装するための関数と
それらを制御する変数について述べます。

@defvar buffer-auto-save-file-name
このバッファローカルな変数は、カレントバッファの自動保存に
用いるファイル名である。
当該バッファを自動保存しない場合には@code{nil}である。

@example
@group
buffer-auto-save-file-name
     @result{} "/xcssun/users/rms/lewis/#backups.texi#"
@end group
@end example
@end defvar

@deffn Command auto-save-mode arg
This is the mode command for Auto Save mode, a buffer-local minor
mode.  When Auto Save mode is enabled, auto-saving is enabled in the
buffer.  The calling convention is the same as for other minor mode
commands (@pxref{Minor Mode Conventions}).

Unlike most minor modes, there is no @code{auto-save-mode} variable.
Auto Save mode is enabled if @code{buffer-auto-save-file-name} is
non-@code{nil} and @code{buffer-saved-size} (see below) is non-zero.
@end deffn

@defun auto-save-file-name-p filename
この関数は、@var{filename}が自動保存ファイルの名前であるならば、
@code{nil}以外を返す。
この関数は自動保存ファイルの通常の名前の慣習を仮定する。
つまり、名前がハッシュマーク（@samp{#}）で始まりかつ終っていれば、
自動保存ファイルの名前である可能性があると判断する。
ただし、引数@var{filename}にはディレクトリ部分を含まないこと。

@example
@group
(make-auto-save-file-name)
     @result{} "/xcssun/users/rms/lewis/#backups.texi#"
@end group
@group
(auto-save-file-name-p "#backups.texi#")
     @result{} 0
@end group
@group
(auto-save-file-name-p "backups.texi")
     @result{} nil
@end group
@end example

この関数の標準定義はつぎのとおりである。

@example
@group
(defun auto-save-file-name-p (filename)
  "Return non-nil if FILENAME can be yielded by..."
  (string-match "^#.*#$" filename))
@end group
@end example

この関数は、自動保存ファイルの名前の慣習を変更したい場合に
当該関数をカスタマイズできるようにするためである。
当該関数を再定義した場合には、関数@code{make-auto-save-file-name}も
それに従って必ず再定義すること。
@end defun

@defun make-auto-save-file-name
この関数は、カレントバッファの自動保存に使うファイル名を返す。
その名前は、単にファイル名の前後にハッシュマーク（@samp{#}）を
付加するだけである。
この関数は変数@code{auto-save-visited-file-name}（下記参照）を
調べない。そのため、この関数を呼び出すような関数は、まずその変数を検査
しておくべきである。

@example
@group
(make-auto-save-file-name)
     @result{} "/xcssun/users/rms/lewis/#backups.texi#"
@end group
@end example

この関数の標準定義はつぎのとおりである。

@example
@group
(defun make-auto-save-file-name ()
  "Return file name to use for auto-saves \
of current buffer.."
  (if buffer-file-name
@end group
@group
      (concat
       (file-name-directory buffer-file-name)
       "#"
       (file-name-nondirectory buffer-file-name)
       "#")
    (expand-file-name
     (concat "#%" (buffer-name) "#"))))
@end group
@end example

自動保存ファイルの名前の慣習をカスタマイズするために
関数を再定義できるように1つの関数にしてある。
関数@code{auto-save-file-name-p}もそれに従って必ず変更すること。
@end defun

@defopt auto-save-visited-file-name
この変数が@code{nil}以外であると、
Emacsは訪問しているファイルにバッファを自動保存する。
つまり、読者が編集しているファイルと同じファイルに自動保存を行う。
通常、この変数は@code{nil}であり、自動保存ファイルには
@code{make-auto-save-file-name}で作成した別の名前がある。

この変数の値を変更しても、すでにあるバッファでは、
バッファの自動保存をつぎにオンにするまで、新しい値は効果を発揮しない。
自動保存がすでにオンであると、
@code{auto-save-mode}を再度呼び出すまでは、
同じファイルの名前に自動保存し続ける。
@end defopt

@defun recent-auto-save-p
カレントバッファに最後に読み込んだり保存してから以降に自動保存していると、
この関数は@code{t}を返す。
@end defun

@defun set-buffer-auto-saved
この関数は、カレントバッファに自動保存済みであると印を付ける。
バッファのテキストが再度変更されない限り、バッファは自動保存されない。
この関数は@code{nil}を返す。
@end defun

@defopt auto-save-interval
この変数の値は、つぎの自動保存までに
Emacsがキーボードから読み取る文字の個数である。
これだけの文字を読み取るたびに、自動保存をオンにしてあるすべてのバッファを
自動保存する。
@end defopt

@defopt auto-save-timeout
この変数の値は、自動保存を引き起こすまでのなにもしていない期間の秒数である。
この時間だけユーザーがなにもしないと、
Emacsは自動保存する必要があるすべてのバッファを自動保存する。
（カレントバッファが大きい場合には、指定した時間にサイズに依存した係数
を掛ける。これは100万バイトでおよそ4である）。

この変数が0か@code{nil}の場合には、
then auto-saving is not done as a
result of idleness, only after a certain number of input events as
specified by @code{auto-save-interval}.
@end defopt

@defvar auto-save-hook
このノーマルフックは、自動保存を行う直前に毎回実行される。
@end defvar

@defopt auto-save-default
この変数が@code{nil}以外であると、
ファイルを訪問しているバッファはデフォルトで自動保存をオンにする。
さもなければ、そうしない。
@end defopt

@deffn Command do-auto-save &optional no-message current-only
この関数は、自動保存する必要があるすべてのバッファを自動保存する。
自動保存がオンになっていて、かつ、以前の自動保存からあとで
変更されているすべてのバッファを自動保存する。

通常、バッファを自動保存すると、@code{do-auto-save}は
自動保存を実行中に、エコー領域にメッセージ@samp{Auto-saving...}を表示する。
しかし、@var{no-message}が@code{nil}以外であると、
メッセージを表示しない。

@var{current-only}が@code{nil}以外であると、
カレントバッファのみを自動保存する。
@end deffn

@defun delete-auto-save-file-if-necessary &optional force
この関数は、@code{delete-auto-save-files}が@code{nil}以外であると、
カレントバッファの自動保存ファイルを削除する。
バッファを保存するたびに呼び出される。

Unless @var{force} is non-@code{nil}, this function only deletes the
file if it was written by the current Emacs session since the last
true save.
@end defun

@defopt delete-auto-save-files
この変数は、関数@code{delete-auto-save-file-if-necessary}が使う。
@code{nil}以外であると、Emacsは（訪問しているファイルに）実際に
保存すると自動保存ファイルを削除する。
これによりディスクスペースを節約し、読者のディレクトリを整頓できる。
@end defopt

@defun rename-auto-save-file
この関数は、訪問しているファイルの名前が変更されていると、
カレントバッファの自動保存ファイルの名前を修正する。
さらに、既存の自動保存ファイルも改名する。
訪問しているファイルの名前が変更されていなければ、
この関数はなにもしない。
@end defun

@defvar buffer-saved-size
このバッファローカルな変数の値は、
最後に読み込んだり保存したり自動保存したときの
カレントバッファの長さである。
サイズの大幅な変更を検知すると自動保存をオフにするために使われる。

この変数が@minus{}1であると、
大幅にサイズが減少したために一時的に自動保存をオフにしたことを意味する。
明示的にバッファを保存すると、この変数に正の値が保存され、
自動保存が再度オンになる。
自動保存をオフにしたりオンにしても、この変数が変更される。つまり、大幅
なサイズ減少の情報は消えてしまうことになる。

If it is @minus{}2, that means this buffer should disregard changes in
buffer size; in particular, it should not shut off auto-saving
temporarily due to changes in buffer size.
@end defvar

@defvar auto-save-list-file-name
この変数は（@code{nil}以外であると）、
すべての自動保存ファイルの名前を記録するファイルを指定する。
Emacsが自動保存を行うたびに、
自動保存がオンである各バッファに関する2行をこのファイルに書き出す。
1行目は訪問しているファイルの名前を与え（訪問していなければ空）、
2行目は自動保存ファイルの名前を与える。

Emacsが正常に終ると、このファイルは削除される。Emacsがクラッシュしたら、
失われてしまう作業内容を含んでいるかもしれない自動保存ファイルを探すた
めに読者はこのファイルを調べられる。コマンド@code{recover-session}は作
業中だったファイルを探すために、このファイルを使う。

このファイルのデフォルト名は、
読者のホームディレクトリにあり@samp{.saves-}で始まる。
さらに、Emacsのプロセス@sc{id}とホスト名も含む。
@end defvar

@defopt auto-save-list-file-prefix
Emacsが初期化ファイルを読み込んだ後に、@code{auto-save-list-file-name}
(すでに@code{nil}以外を設定していなければ)、この変数を基にホスト名やプ
ロセスIDを加えて初期化される。初期化ファイルでこの変数に@code{nil}を設
定すると、Emacsは@code{auto-save-list-file-name}を初期化しない。
@end defopt

@node Reverting
@section 復元 @emph{(2003/10/30)}
@cindex reverting buffers

ファイルを大幅に変更したあとで、そのような変更をやめたい場合には、
コマンド@code{revert-buffer}でファイルのまえの版を読み込めます。
@xref{Reverting,, バッファを復元する, emacs, GNU Emacs マニュアル}。

@deffn Command revert-buffer &optional ignore-auto noconfirm preserve-modes
このコマンドは、バッファのテキストを
ディスク上の訪問しているファイルのテキストで置き換える。
これにより、ファイルを訪問したり保存してから行った変更をすべて取り消せる。

デフォルトでは、最後の自動保存ファイルが
訪問しているファイルよりも新しい場合には、
@code{revert-buffer}は自動保存ファイルを使うかどうか
ユーザーに問い合わせる。
しかし、引数@var{ignore-auto}が@code{nil}以外であると、
訪問したファイルのみを使う。
対話的に呼ばれた場合、数値前置引数を指定しない限り、
@var{ignore-auto}は@code{t}である。
したがって、対話的な場合のデフォルトでは、自動保存ファイルを検査する。

通常、バッファを変更するまえに@code{revert-buffer}は確認してくる。
しかし、引数@var{noconfirm}が@code{nil}以外であると、
@code{revert-buffer}は確認しない。

Normally, this command reinitializes the buffer's major and minor modes
using @code{normal-mode}.  But if @var{preserve-modes} is
non-@code{nil}, the modes remain unchanged.

復元作業では、
@code{insert-file-contents}の置換機能を用いて
バッファ内のマーカ位置を保存するように努める。
復元操作のまえにバッファの内容とファイルの内容が同一であれば、
すべてのマークが保存される。
同一でなければ、復元によりバッファが変更され、
バッファの先頭と末尾の（あれば）未変更なテキスト内のマーカを保存する。
それ以外のマーカを保存しても問題を引き起こすだけであろう。
@end deffn

@defvar revert-buffer-in-progress-p
@code{revert-buffer} binds this variable to a non-@code{nil} value
while it is working.
@end defvar

この節の残りで述べる変数を設定することで、
@code{revert-buffer}の動作をカスタマイズできます。

@defopt revert-without-query
この変数は、問い合わせずに復元すべきファイルのリストを保持する。
値は、正規表現のリストである。
訪問中のファイル名がこれらの正規表現の1つに一致すると、
ディスク上のファイルが変更されていて当該バッファが未変更であれば、
@code{revert-buffer}はユーザーに確認せずに当該ファイルを復元する。
@end defopt

あるメジャーモードは これらの関数をバッファローカルで設定することで
、@code{revert-buffer}をカスタマイズしています。

@defvar revert-buffer-function
@anchor{Definition of revert-buffer-function}
この変数の値は、このバッファを復元するために使う関数である。
It should be a function with two optional
arguments to do the work of reverting.  The two optional arguments,
@var{ignore-auto} and @var{noconfirm}, are the arguments that
@code{revert-buffer} received.

diredモードなどのモードでは、
編集中のテキストはファイルの内容ではなく
別の方法で再生成されたものなので、
この変数のバッファローカルな値には内容を再生成する関数を指定することが
できます。
@end defvar

@defvar revert-buffer-insert-file-contents-function
この変数の値が@code{nil}以外であると、
このバッファを復元するときに更新内容を挿入するために使われる関数である。
当該関数は2つの引数をとる。
第1引数は、使用するファイル名である。
第2引数は、ユーザーが自動保存ファイルを
読むように指示していると@code{t}である。

あるモードでこの変数を@code{revert-buffer-function}のかわりに設定する
のは、@code{revert-buffer}が行う処理の残りが重複したり置き換わってしま
うのを避けるためである。つまり、アンドゥ情報を消去する場合や適当なメ
ジャーモードを決定する場合、以下で述べるフックを走らせる場合に確認を行
う。
@end defvar

@defvar before-revert-hook
このノーマルフックは、@code{revert-buffer-function}が、
変更内容を挿入する前に実行する。
A custom @code{revert-buffer-function}
may or may not run this hook.
@end defvar

@defvar after-revert-hook
このノーマルフックは、@code{revert-buffer-function}が、
変更内容を挿入したあとに実行する。
A custom @code{revert-buffer-function}
may or may not run this hook.
@end defvar

@c FIXME?  Move this section from arevert-xtra to here?
@defvar buffer-stale-function
The value of this variable specifies a function to call to check
whether a buffer needs reverting.  The default value only handles
buffers that are visiting files, by checking their modification time.
Buffers that are not visiting files require a custom function
@iftex
(@pxref{Supporting additional buffers,,, emacs-xtra,  Specialized Emacs Features}).
@end iftex
@ifnottex
(@pxref{Supporting additional buffers,,, emacs}).
@end ifnottex
@end defvar
